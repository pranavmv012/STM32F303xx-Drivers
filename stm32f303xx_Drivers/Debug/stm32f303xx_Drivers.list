
stm32f303xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020fc  080020fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080020fc  080020fc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020fc  080020fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020fc  080020fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000038  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003de0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ab0  00000000  00000000  00023e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00024938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  00024b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000039fd  00000000  00000000  00024d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002822  00000000  00000000  0002872d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bb8c  00000000  00000000  0002af4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00036adb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fe8  00000000  00000000  00036b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001fd4 	.word	0x08001fd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08001fd4 	.word	0x08001fd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIO_PCLKControl>:
 *   Inputs		:  Pointer to base address of the GPIO port, Enable or disable variable
 * Output/return:  NOne.
 * =====================================================================================
 */
void GPIO_PCLKControl(GPIO_Reg_Def_t *pGPIOx, uint8_t ENorDI)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
 if(ENorDI == ENABLE)
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d167      	bne.n	8000362 <GPIO_PCLKControl+0xe2>
  {
	 if(pGPIOx ==GPIOA)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000298:	d108      	bne.n	80002ac <GPIO_PCLKControl+0x2c>
	 {
		GPIOA_PCLK_EN();
 800029a:	4b68      	ldr	r3, [pc, #416]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	4b66      	ldr	r3, [pc, #408]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002a8:	615a      	str	r2, [r3, #20]
	  }else if(pGPIOx == GPIOH)
	  {
	      GPIOH_PCLK_DI();
	  }
 }
}
 80002aa:	e0c1      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 }else if(pGPIOx == GPIOB)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a64      	ldr	r2, [pc, #400]	; (8000440 <GPIO_PCLKControl+0x1c0>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d108      	bne.n	80002c6 <GPIO_PCLKControl+0x46>
		GPIOB_PCLK_EN();
 80002b4:	4b61      	ldr	r3, [pc, #388]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	695a      	ldr	r2, [r3, #20]
 80002ba:	4b60      	ldr	r3, [pc, #384]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80002c2:	615a      	str	r2, [r3, #20]
}
 80002c4:	e0b4      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 }else if(pGPIOx == GPIOC)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a5e      	ldr	r2, [pc, #376]	; (8000444 <GPIO_PCLKControl+0x1c4>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d108      	bne.n	80002e0 <GPIO_PCLKControl+0x60>
		GPIOC_PCLK_EN();
 80002ce:	4b5b      	ldr	r3, [pc, #364]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	4b59      	ldr	r3, [pc, #356]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80002dc:	615a      	str	r2, [r3, #20]
}
 80002de:	e0a7      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 } else if(pGPIOx == GPIOD)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a59      	ldr	r2, [pc, #356]	; (8000448 <GPIO_PCLKControl+0x1c8>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d108      	bne.n	80002fa <GPIO_PCLKControl+0x7a>
		GPIOD_PCLK_EN();
 80002e8:	4b54      	ldr	r3, [pc, #336]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	695a      	ldr	r2, [r3, #20]
 80002ee:	4b53      	ldr	r3, [pc, #332]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80002f6:	615a      	str	r2, [r3, #20]
}
 80002f8:	e09a      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 }else if(pGPIOx == GPIOE)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a53      	ldr	r2, [pc, #332]	; (800044c <GPIO_PCLKControl+0x1cc>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d108      	bne.n	8000314 <GPIO_PCLKControl+0x94>
	    GPIOE_PCLK_EN();
 8000302:	4b4e      	ldr	r3, [pc, #312]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	4b4c      	ldr	r3, [pc, #304]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000310:	615a      	str	r2, [r3, #20]
}
 8000312:	e08d      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	  }else if(pGPIOx == GPIOF)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a4e      	ldr	r2, [pc, #312]	; (8000450 <GPIO_PCLKControl+0x1d0>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d108      	bne.n	800032e <GPIO_PCLKControl+0xae>
		GPIOF_PCLK_EN();
 800031c:	4b47      	ldr	r3, [pc, #284]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	4b46      	ldr	r3, [pc, #280]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800032a:	615a      	str	r2, [r3, #20]
}
 800032c:	e080      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	  }else if(pGPIOx == GPIOG)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a48      	ldr	r2, [pc, #288]	; (8000454 <GPIO_PCLKControl+0x1d4>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d108      	bne.n	8000348 <GPIO_PCLKControl+0xc8>
	      GPIOG_PCLK_EN();
 8000336:	4b41      	ldr	r3, [pc, #260]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	695a      	ldr	r2, [r3, #20]
 800033c:	4b3f      	ldr	r3, [pc, #252]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000344:	615a      	str	r2, [r3, #20]
}
 8000346:	e073      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	  }else if(pGPIOx == GPIOH)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a43      	ldr	r2, [pc, #268]	; (8000458 <GPIO_PCLKControl+0x1d8>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d16f      	bne.n	8000430 <GPIO_PCLKControl+0x1b0>
	      GPIOH_PCLK_EN();
 8000350:	4b3a      	ldr	r3, [pc, #232]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	695a      	ldr	r2, [r3, #20]
 8000356:	4b39      	ldr	r3, [pc, #228]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800035e:	615a      	str	r2, [r3, #20]
}
 8000360:	e066      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 if(pGPIOx ==GPIOA)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000368:	d108      	bne.n	800037c <GPIO_PCLKControl+0xfc>
		GPIOA_PCLK_DI();
 800036a:	4b34      	ldr	r3, [pc, #208]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	695a      	ldr	r2, [r3, #20]
 8000370:	4b32      	ldr	r3, [pc, #200]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000378:	615a      	str	r2, [r3, #20]
}
 800037a:	e059      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 }else if(pGPIOx == GPIOB)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a30      	ldr	r2, [pc, #192]	; (8000440 <GPIO_PCLKControl+0x1c0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d108      	bne.n	8000396 <GPIO_PCLKControl+0x116>
		GPIOB_PCLK_DI();
 8000384:	4b2d      	ldr	r3, [pc, #180]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b2c      	ldr	r3, [pc, #176]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000392:	615a      	str	r2, [r3, #20]
}
 8000394:	e04c      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 }else if(pGPIOx == GPIOC)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a2a      	ldr	r2, [pc, #168]	; (8000444 <GPIO_PCLKControl+0x1c4>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d108      	bne.n	80003b0 <GPIO_PCLKControl+0x130>
		GPIOC_PCLK_DI();
 800039e:	4b27      	ldr	r3, [pc, #156]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	4b25      	ldr	r3, [pc, #148]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80003ac:	615a      	str	r2, [r3, #20]
}
 80003ae:	e03f      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 } else if(pGPIOx == GPIOD)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a25      	ldr	r2, [pc, #148]	; (8000448 <GPIO_PCLKControl+0x1c8>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d108      	bne.n	80003ca <GPIO_PCLKControl+0x14a>
		GPIOD_PCLK_DI();
 80003b8:	4b20      	ldr	r3, [pc, #128]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	695a      	ldr	r2, [r3, #20]
 80003be:	4b1f      	ldr	r3, [pc, #124]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80003c6:	615a      	str	r2, [r3, #20]
}
 80003c8:	e032      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	 }else if(pGPIOx == GPIOE)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1f      	ldr	r2, [pc, #124]	; (800044c <GPIO_PCLKControl+0x1cc>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d108      	bne.n	80003e4 <GPIO_PCLKControl+0x164>
	    GPIOE_PCLK_DI();
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	695a      	ldr	r2, [r3, #20]
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80003e0:	615a      	str	r2, [r3, #20]
}
 80003e2:	e025      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	  }else if(pGPIOx == GPIOF)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a1a      	ldr	r2, [pc, #104]	; (8000450 <GPIO_PCLKControl+0x1d0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d108      	bne.n	80003fe <GPIO_PCLKControl+0x17e>
		GPIOF_PCLK_DI();
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <GPIO_PCLKControl+0x1bc>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80003fa:	615a      	str	r2, [r3, #20]
}
 80003fc:	e018      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	  }else if(pGPIOx == GPIOG)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a14      	ldr	r2, [pc, #80]	; (8000454 <GPIO_PCLKControl+0x1d4>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d108      	bne.n	8000418 <GPIO_PCLKControl+0x198>
	      GPIOG_PCLK_DI();
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <GPIO_PCLKControl+0x1bc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000414:	615a      	str	r2, [r3, #20]
}
 8000416:	e00b      	b.n	8000430 <GPIO_PCLKControl+0x1b0>
	  }else if(pGPIOx == GPIOH)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a0f      	ldr	r2, [pc, #60]	; (8000458 <GPIO_PCLKControl+0x1d8>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d107      	bne.n	8000430 <GPIO_PCLKControl+0x1b0>
	      GPIOH_PCLK_DI();
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <GPIO_PCLKControl+0x1bc>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800042e:	615a      	str	r2, [r3, #20]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	20000000 	.word	0x20000000
 8000440:	48000400 	.word	0x48000400
 8000444:	48000800 	.word	0x48000800
 8000448:	48000c00 	.word	0x48000c00
 800044c:	48001000 	.word	0x48001000
 8000450:	48001400 	.word	0x48001400
 8000454:	48001800 	.word	0x48001800
 8000458:	48001c00 	.word	0x48001c00

0800045c <GPIO_Init>:
 *   Inputs		:  Pointer to GPIO handle.
 * Output/return:  None.
 * =====================================================================================
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
	//enable the clock control implicitly to help user.
	GPIO_PCLKControl(pGPIOHandle->pGPIOx, ENABLE);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff06 	bl	8000280 <GPIO_PCLKControl>
//configure the mode

	if(pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d822      	bhi.n	80004c2 <GPIO_Init+0x66>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	461a      	mov	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~ (0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum) );
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	2103      	movs	r1, #3
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	43db      	mvns	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	400a      	ands	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6819      	ldr	r1, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	697a      	ldr	r2, [r7, #20]
 80004b8:	430a      	orrs	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
		temp=0;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	e0d0      	b.n	8000664 <GPIO_Init+0x208>
	}
	else
	{
		//interrupt mode
		if(pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_IT_FET)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	795b      	ldrb	r3, [r3, #5]
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d11b      	bne.n	8000502 <GPIO_Init+0xa6>
		{
		//configure the falling edge of interrupt on extiregister. FTSR reg
			pEXTI->EXTI_FTSR1 |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 80004ca:	4b4d      	ldr	r3, [pc, #308]	; (8000600 <GPIO_Init+0x1a4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68da      	ldr	r2, [r3, #12]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	4619      	mov	r1, r3
 80004d6:	2301      	movs	r3, #1
 80004d8:	408b      	lsls	r3, r1
 80004da:	4619      	mov	r1, r3
 80004dc:	4b48      	ldr	r3, [pc, #288]	; (8000600 <GPIO_Init+0x1a4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	60da      	str	r2, [r3, #12]
			//clear corresponding rtsr reg
			pEXTI->EXTI_RTSR1 &= ~(1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 80004e4:	4b46      	ldr	r3, [pc, #280]	; (8000600 <GPIO_Init+0x1a4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	689a      	ldr	r2, [r3, #8]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	4619      	mov	r1, r3
 80004f0:	2301      	movs	r3, #1
 80004f2:	408b      	lsls	r3, r1
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	4b41      	ldr	r3, [pc, #260]	; (8000600 <GPIO_Init+0x1a4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	400a      	ands	r2, r1
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	e03d      	b.n	800057e <GPIO_Init+0x122>

		}else if(pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_IT_RET)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	2b05      	cmp	r3, #5
 8000508:	d11b      	bne.n	8000542 <GPIO_Init+0xe6>
		{
		//configure the falling edge of interrupt on exti reg. RTSR reg
			pEXTI->EXTI_RTSR1 |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 800050a:	4b3d      	ldr	r3, [pc, #244]	; (8000600 <GPIO_Init+0x1a4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	689a      	ldr	r2, [r3, #8]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	4619      	mov	r1, r3
 8000516:	2301      	movs	r3, #1
 8000518:	408b      	lsls	r3, r1
 800051a:	4619      	mov	r1, r3
 800051c:	4b38      	ldr	r3, [pc, #224]	; (8000600 <GPIO_Init+0x1a4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	430a      	orrs	r2, r1
 8000522:	609a      	str	r2, [r3, #8]
			//clear corresponding rtsr reg
			pEXTI->EXTI_FTSR1 &= ~(1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 8000524:	4b36      	ldr	r3, [pc, #216]	; (8000600 <GPIO_Init+0x1a4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68da      	ldr	r2, [r3, #12]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	2301      	movs	r3, #1
 8000532:	408b      	lsls	r3, r1
 8000534:	43db      	mvns	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	4b31      	ldr	r3, [pc, #196]	; (8000600 <GPIO_Init+0x1a4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	400a      	ands	r2, r1
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	e01d      	b.n	800057e <GPIO_Init+0x122>

		}else if(pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_IT_FRET)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d119      	bne.n	800057e <GPIO_Init+0x122>
		{
		//configure the falling edge of interrupt on exti register. FTSR and RTSR reg
			pEXTI->EXTI_RTSR1 |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 800054a:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <GPIO_Init+0x1a4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	689a      	ldr	r2, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	4619      	mov	r1, r3
 8000556:	2301      	movs	r3, #1
 8000558:	408b      	lsls	r3, r1
 800055a:	4619      	mov	r1, r3
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <GPIO_Init+0x1a4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	430a      	orrs	r2, r1
 8000562:	609a      	str	r2, [r3, #8]
			pEXTI->EXTI_FTSR1 |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <GPIO_Init+0x1a4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	4619      	mov	r1, r3
 8000570:	2301      	movs	r3, #1
 8000572:	408b      	lsls	r3, r1
 8000574:	4619      	mov	r1, r3
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <GPIO_Init+0x1a4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	430a      	orrs	r2, r1
 800057c:	60da      	str	r2, [r3, #12]
		}
		//Enable the port selection in sysconfig exticr: 4 exti regs. and each pin/exti is 4bit wide.

		uint8_t temp1 = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum) / 4;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	089b      	lsrs	r3, r3, #2
 8000584:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum) % 4;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	f003 0303 	and.w	r3, r3, #3
 800058e:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GET_PORT_CODE(pGPIOHandle->pGPIOx);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000598:	d042      	beq.n	8000620 <GPIO_Init+0x1c4>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a19      	ldr	r2, [pc, #100]	; (8000604 <GPIO_Init+0x1a8>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d02b      	beq.n	80005fc <GPIO_Init+0x1a0>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <GPIO_Init+0x1ac>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d024      	beq.n	80005f8 <GPIO_Init+0x19c>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a16      	ldr	r2, [pc, #88]	; (800060c <GPIO_Init+0x1b0>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d01d      	beq.n	80005f4 <GPIO_Init+0x198>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a14      	ldr	r2, [pc, #80]	; (8000610 <GPIO_Init+0x1b4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d016      	beq.n	80005f0 <GPIO_Init+0x194>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <GPIO_Init+0x1b8>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d00f      	beq.n	80005ec <GPIO_Init+0x190>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <GPIO_Init+0x1bc>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d008      	beq.n	80005e8 <GPIO_Init+0x18c>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <GPIO_Init+0x1c0>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d101      	bne.n	80005e4 <GPIO_Init+0x188>
 80005e0:	2307      	movs	r3, #7
 80005e2:	e01e      	b.n	8000622 <GPIO_Init+0x1c6>
 80005e4:	2300      	movs	r3, #0
 80005e6:	e01c      	b.n	8000622 <GPIO_Init+0x1c6>
 80005e8:	2306      	movs	r3, #6
 80005ea:	e01a      	b.n	8000622 <GPIO_Init+0x1c6>
 80005ec:	2305      	movs	r3, #5
 80005ee:	e018      	b.n	8000622 <GPIO_Init+0x1c6>
 80005f0:	2304      	movs	r3, #4
 80005f2:	e016      	b.n	8000622 <GPIO_Init+0x1c6>
 80005f4:	2303      	movs	r3, #3
 80005f6:	e014      	b.n	8000622 <GPIO_Init+0x1c6>
 80005f8:	2302      	movs	r3, #2
 80005fa:	e012      	b.n	8000622 <GPIO_Init+0x1c6>
 80005fc:	2301      	movs	r3, #1
 80005fe:	e010      	b.n	8000622 <GPIO_Init+0x1c6>
 8000600:	20000004 	.word	0x20000004
 8000604:	48000400 	.word	0x48000400
 8000608:	48000800 	.word	0x48000800
 800060c:	48000c00 	.word	0x48000c00
 8000610:	48001000 	.word	0x48001000
 8000614:	48001400 	.word	0x48001400
 8000618:	48001800 	.word	0x48001800
 800061c:	48001c00 	.word	0x48001c00
 8000620:	2300      	movs	r3, #0
 8000622:	747b      	strb	r3, [r7, #17]
		pSYSCFG->SYSCFG_EXTICR[temp1] |= (portCode << (4 * temp2));
 8000624:	4b5f      	ldr	r3, [pc, #380]	; (80007a4 <GPIO_Init+0x348>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	7cfa      	ldrb	r2, [r7, #19]
 800062a:	3202      	adds	r2, #2
 800062c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000630:	7c7a      	ldrb	r2, [r7, #17]
 8000632:	7cbb      	ldrb	r3, [r7, #18]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <GPIO_Init+0x348>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	7cfa      	ldrb	r2, [r7, #19]
 8000642:	4301      	orrs	r1, r0
 8000644:	3202      	adds	r2, #2
 8000646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		//Enable the interrupt delivery to the processor by setting exti IMR register.
		pEXTI->EXTI_IMR1 |= (1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum);
 800064a:	4b57      	ldr	r3, [pc, #348]	; (80007a8 <GPIO_Init+0x34c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	4619      	mov	r1, r3
 8000656:	2301      	movs	r3, #1
 8000658:	408b      	lsls	r3, r1
 800065a:	4619      	mov	r1, r3
 800065c:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <GPIO_Init+0x34c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	430a      	orrs	r2, r1
 8000662:	601a      	str	r2, [r3, #0]
	}
	temp = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
//configure the speed
	temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~ (0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum) );
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	2103      	movs	r1, #3
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	43db      	mvns	r3, r3
 800068e:	4619      	mov	r1, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	400a      	ands	r2, r1
 8000696:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	6899      	ldr	r1, [r3, #8]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	609a      	str	r2, [r3, #8]
	temp=0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
//configure the pupd settings
	temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinPuPdCntrl << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum));
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a1b      	ldrb	r3, [r3, #8]
 80006b0:	461a      	mov	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~ (0x3 << (2 * pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	2103      	movs	r1, #3
 80006cc:	fa01 f303 	lsl.w	r3, r1, r3
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	400a      	ands	r2, r1
 80006da:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68d9      	ldr	r1, [r3, #12]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	60da      	str	r2, [r3, #12]
	temp =0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
//configure output type
	temp = (pGPIOHandle->GPIO_Pin_Config.GPIO_PinOType << (pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum));
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	461a      	mov	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~ (0x1 << pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum );
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	4619      	mov	r1, r3
 800070c:	2301      	movs	r3, #1
 800070e:	408b      	lsls	r3, r1
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6859      	ldr	r1, [r3, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	430a      	orrs	r2, r1
 800072a:	605a      	str	r2, [r3, #4]
	temp=0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
//configure the alternate functionalities
	if(pGPIOHandle->GPIO_Pin_Config.GPIO_PinMode == GPIO_MODE_AF)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d131      	bne.n	800079c <GPIO_Init+0x340>
	{
		uint8_t temp1, temp2;
		temp1= (pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum)/8;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	743b      	strb	r3, [r7, #16]
		temp2= (pGPIOHandle->GPIO_Pin_Config.GPIO_PinNum)%8;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (temp2 * 4 ));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	7c3a      	ldrb	r2, [r7, #16]
 8000750:	3208      	adds	r2, #8
 8000752:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	220f      	movs	r2, #15
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	7c3a      	ldrb	r2, [r7, #16]
 800076a:	4001      	ands	r1, r0
 800076c:	3208      	adds	r2, #8
 800076e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_Pin_Config.GPIO_PinAFmode << (temp2 * 4 ));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	7c3a      	ldrb	r2, [r7, #16]
 8000778:	3208      	adds	r2, #8
 800077a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7a5b      	ldrb	r3, [r3, #9]
 8000782:	461a      	mov	r2, r3
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	4618      	mov	r0, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	7c3a      	ldrb	r2, [r7, #16]
 8000794:	4301      	orrs	r1, r0
 8000796:	3208      	adds	r2, #8
 8000798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <GPIO_ReadInputPin>:
 *   Inputs		:  Pointer to the base address of gpio port, pin number
 * Output/return:  if the pin is high or low. 0 or 1
 * =====================================================================================
 */
uint8_t  GPIO_ReadInputPin(GPIO_Reg_Def_t *pGPIOx, uint8_t PinNum)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	val = (uint8_t) (pGPIOx->IDR >>PinNum) & 0x00000001;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691a      	ldr	r2, [r3, #16]
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	fa22 f303 	lsr.w	r3, r2, r3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
	return val;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SPI_PCLKControl>:
 *   Inputs		:  Pointer to base address of the SPI port, Enable or disable variable
 * Output/return:  None.
 * =====================================================================================
 */
void SPI_PCLKControl(SPI_Reg_Def_t *pSPIx, uint8_t ENorDI)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	 if(ENorDI == ENABLE)
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d133      	bne.n	8000852 <SPI_PCLKControl+0x7a>
	  {
		 if(pSPIx == SPI1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a35      	ldr	r2, [pc, #212]	; (80008c4 <SPI_PCLKControl+0xec>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d108      	bne.n	8000804 <SPI_PCLKControl+0x2c>
		 {
			SPI1_PCLK_EN();
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <SPI_PCLKControl+0xf0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	699a      	ldr	r2, [r3, #24]
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <SPI_PCLKControl+0xf0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000800:	619a      	str	r2, [r3, #24]
		 } else if(pSPIx == SPI4)
		 {
			 SPI4_PCLK_DI();
		 }
	 }
}
 8000802:	e059      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 }else if(pSPIx == SPI2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <SPI_PCLKControl+0xf4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d108      	bne.n	800081e <SPI_PCLKControl+0x46>
			 SPI2_PCLK_EN();
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <SPI_PCLKControl+0xf0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	69da      	ldr	r2, [r3, #28]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800081a:	61da      	str	r2, [r3, #28]
}
 800081c:	e04c      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 }else if(pSPIx == SPI3)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <SPI_PCLKControl+0xf8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d108      	bne.n	8000838 <SPI_PCLKControl+0x60>
			 SPI3_PCLK_EN();
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <SPI_PCLKControl+0xf0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000834:	61da      	str	r2, [r3, #28]
}
 8000836:	e03f      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 } else if(pSPIx == SPI4)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <SPI_PCLKControl+0xfc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d13b      	bne.n	80008b8 <SPI_PCLKControl+0xe0>
			 SPI4_PCLK_EN();
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800084e:	619a      	str	r2, [r3, #24]
}
 8000850:	e032      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 if(pSPIx == SPI1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <SPI_PCLKControl+0xec>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d108      	bne.n	800086c <SPI_PCLKControl+0x94>
			SPI1_PCLK_DI();
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <SPI_PCLKControl+0xf0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	699a      	ldr	r2, [r3, #24]
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000868:	619a      	str	r2, [r3, #24]
}
 800086a:	e025      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 }else if(pSPIx == SPI2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <SPI_PCLKControl+0xf4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d108      	bne.n	8000886 <SPI_PCLKControl+0xae>
			 SPI2_PCLK_DI();
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <SPI_PCLKControl+0xf0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000882:	61da      	str	r2, [r3, #28]
}
 8000884:	e018      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 }else if(pSPIx == SPI3)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <SPI_PCLKControl+0xf8>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d108      	bne.n	80008a0 <SPI_PCLKControl+0xc8>
			 SPI3_PCLK_DI();
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <SPI_PCLKControl+0xf0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800089c:	61da      	str	r2, [r3, #28]
}
 800089e:	e00b      	b.n	80008b8 <SPI_PCLKControl+0xe0>
		 } else if(pSPIx == SPI4)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <SPI_PCLKControl+0xfc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d107      	bne.n	80008b8 <SPI_PCLKControl+0xe0>
			 SPI4_PCLK_DI();
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <SPI_PCLKControl+0xf0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	699a      	ldr	r2, [r3, #24]
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SPI_PCLKControl+0xf0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008b6:	619a      	str	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40013000 	.word	0x40013000
 80008c8:	2000000c 	.word	0x2000000c
 80008cc:	40003800 	.word	0x40003800
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	40013c00 	.word	0x40013c00

080008d8 <SPI_Init>:
 *   Inputs		:  Pointer to SPI handle.
 * Output/return:  None.
 * =====================================================================================
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock in init to help the user not to declare explicitly
	SPI_PCLKControl(pSPIHandle->pSPIx, ENABLE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff76 	bl	80007d8 <SPI_PCLKControl>
	//configure CR1 reg
	uint32_t tempreg = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	//Configuring device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
	if((pSPIHandle->SPIConfig.SPI_BusConfig )== SPI_BUS_CONFIG_FD)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	795b      	ldrb	r3, [r3, #5]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <SPI_Init+0x38>
	{
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);//clear bidi bit
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e014      	b.n	800093a <SPI_Init+0x62>
	}else if((pSPIHandle->SPIConfig.SPI_BusConfig) == SPI_BUS_CONFIG_HD)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	795b      	ldrb	r3, [r3, #5]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d104      	bne.n	8000922 <SPI_Init+0x4a>
	{
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00b      	b.n	800093a <SPI_Init+0x62>
	}else if((pSPIHandle->SPIConfig.SPI_BusConfig) == SPI_BUS_CONFIG_S_RXONLY)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d107      	bne.n	800093a <SPI_Init+0x62>
	{
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);//clear bidi and set rx only bit in cr1
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000930:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000938:	60fb      	str	r3, [r7, #12]
	}
	//configure clock
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7a9b      	ldrb	r3, [r3, #10]
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4313      	orrs	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
	//configure DFF DFF is referred as CRC bit , 11.
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	799b      	ldrb	r3, [r3, #6]
 800094c:	02db      	lsls	r3, r3, #11
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4313      	orrs	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
	//configure CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
	//configure CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	79db      	ldrb	r3, [r3, #7]
 8000968:	461a      	mov	r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SPI_peri_control>:
 *   Inputs		:  Pointer to base address of the SPI port, Enable or disable variable
 * Output/return:  None.
 * =====================================================================================
 */
void SPI_peri_control(SPI_Reg_Def_t *pSPIx, uint8_t ENorDI)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
 if(ENorDI == ENABLE)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <SPI_peri_control+0x20>
 {
	 //set the pse bit in cr1 reg
	 pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
 else
 {
	 //reset the pse bit in cr1 reg
	 pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 }
}
 800099e:	e005      	b.n	80009ac <SPI_peri_control+0x2c>
	 pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SPI_SSOEConfig>:
 *   Inputs		:  Pointer to base address of the SPI port, Enable or disable variable
 * Output/return:  None.
 * =====================================================================================
 */
void SPI_SSOEConfig(SPI_Reg_Def_t *pSPIx, uint8_t ENorDI)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	 if(ENorDI == ENABLE)
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d106      	bne.n	80009d8 <SPI_SSOEConfig+0x20>
	 {
		 //set the ssi bit in cr1 reg
		 pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f043 0204 	orr.w	r2, r3, #4
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]
	 else
	 {
		 //reset the ssi bit in cr1 reg
		 pSPIx->CR1 &= ~(1 << SPI_CR2_SSOE);
	 }
}
 80009d6:	e005      	b.n	80009e4 <SPI_SSOEConfig+0x2c>
		 pSPIx->CR1 &= ~(1 << SPI_CR2_SSOE);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f023 0204 	bic.w	r2, r3, #4
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	601a      	str	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SPI_SendData>:
 *   Inputs		:  Pointer to the base add of the SPI, pointer to the tx data, Data len
 * Output/return:  None.
 * =====================================================================================
 */
void SPI_SendData(SPI_Reg_Def_t *pSPIx, uint8_t *pTxbuffer, uint32_t Len)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
	//when length is 0, there is not data remaining and exit the funciton.
	while(Len > 0)
 80009fc:	e027      	b.n	8000a4e <SPI_SendData+0x5e>
	{
//		while(!(pSPIx->SR & (1 << SPI_SR_TXE)));
		while (SPIgetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);//wait for the length is zero
 80009fe:	bf00      	nop
 8000a00:	2102      	movs	r1, #2
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f000 f862 	bl	8000acc <SPIgetFlagStatus>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f8      	beq.n	8000a00 <SPI_SendData+0x10>
		//check the dff
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00e      	beq.n	8000a38 <SPI_SendData+0x48>
		{
			pSPIx->DR = *((uint16_t* )pTxbuffer);//16bit
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	60da      	str	r2, [r3, #12]
			Len--;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	607b      	str	r3, [r7, #4]
			Len--; //2 times as 2 bytes of data is transmitted.
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxbuffer++; //increment the buffer by 2
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	e00a      	b.n	8000a4e <SPI_SendData+0x5e>
		}
		else
		{
			pSPIx->DR = *pTxbuffer;//8bit
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	60da      	str	r2, [r3, #12]
			Len--; //1 byte of data sent out
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
			pTxbuffer++; //increment the buffer by 1
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1d4      	bne.n	80009fe <SPI_SendData+0xe>
		}
	}
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <SPI_ReceiveData>:
 *   Inputs		:  Pointer to the base add of the SPI, pointer to the rx data, Data len
 * Output/return:  None.
 * =====================================================================================
 */
void SPI_ReceiveData(SPI_Reg_Def_t *pSPIx, uint8_t *pRxbuffer, uint32_t Len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
	//when length is 0, there is not data remaining and exit the funciton.
	while(Len > 0)
 8000a6a:	e027      	b.n	8000abc <SPI_ReceiveData+0x5e>
	{
//		while(!(pSPIx->SR & (1 << SPI_SR_TXE)));
		while (SPIgetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);//wait for the length is zero
 8000a6c:	bf00      	nop
 8000a6e:	2101      	movs	r1, #1
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f000 f82b 	bl	8000acc <SPIgetFlagStatus>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f8      	beq.n	8000a6e <SPI_ReceiveData+0x10>
		//check the dff
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00e      	beq.n	8000aa6 <SPI_ReceiveData+0x48>
		{
			*((uint16_t* )pRxbuffer) = pSPIx->DR;// load 16bit data from the dr to buffer
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	801a      	strh	r2, [r3, #0]
			Len--;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
			Len--; //2 times as 2 bytes of data is transmitted.
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxbuffer++; //increment the buffer by 2
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	e00a      	b.n	8000abc <SPI_ReceiveData+0x5e>
		}
		else
		{
		    *pRxbuffer = pSPIx->DR;//8bit
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	701a      	strb	r2, [r3, #0]
			Len--; //1 byte of data sent out
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
			pRxbuffer++; //increment the buffer by 1
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1d4      	bne.n	8000a6c <SPI_ReceiveData+0xe>
		}
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <SPIgetFlagStatus>:
 *   Inputs		:  pointer to the spi base address. Flag name(which flag has to be read)
 * Output/return:  None.
 * =====================================================================================
 */
uint8_t SPIgetFlagStatus(SPI_Reg_Def_t *pSPIx, uint32_t FlagName)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)//(1 << FlagName)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	4013      	ands	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SPIgetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <SPIgetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <spi2_gpio_init>:

//Arduino led

#define LED_PIN  9
void spi2_gpio_init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
GPIO_Handle_t SPI2pins;
//enable the peripheral clock for gpiob : its done in the init function itself

SPI2pins.pGPIOx = GPIOB;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <spi2_gpio_init+0x58>)
 8000afc:	607b      	str	r3, [r7, #4]
SPI2pins.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODE_AF;
 8000afe:	2302      	movs	r3, #2
 8000b00:	727b      	strb	r3, [r7, #9]
SPI2pins.GPIO_Pin_Config.GPIO_PinAFmode = GPIO_AFR_AF5;
 8000b02:	2305      	movs	r3, #5
 8000b04:	737b      	strb	r3, [r7, #13]
SPI2pins.GPIO_Pin_Config.GPIO_PinOType = GPIO_OUT_TYPE_PP; //spi does not need open drain. so pp
 8000b06:	2300      	movs	r3, #0
 8000b08:	72fb      	strb	r3, [r7, #11]
SPI2pins.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	72bb      	strb	r3, [r7, #10]
SPI2pins.GPIO_Pin_Config.GPIO_PinPuPdCntrl = GPIO_PUPDR_NPUPD;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	733b      	strb	r3, [r7, #12]

//spi2 mosi
SPI2pins.GPIO_Pin_Config.GPIO_PinNum = GPIO_PIN_15;
 8000b12:	230f      	movs	r3, #15
 8000b14:	723b      	strb	r3, [r7, #8]
GPIO_Init(&SPI2pins);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc9f 	bl	800045c <GPIO_Init>
//spi2 miso-not used
SPI2pins.GPIO_Pin_Config.GPIO_PinNum = GPIO_PIN_14;
 8000b1e:	230e      	movs	r3, #14
 8000b20:	723b      	strb	r3, [r7, #8]
GPIO_Init(&SPI2pins);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fc99 	bl	800045c <GPIO_Init>
//spi2 sclk
SPI2pins.GPIO_Pin_Config.GPIO_PinNum = GPIO_PIN_13;
 8000b2a:	230d      	movs	r3, #13
 8000b2c:	723b      	strb	r3, [r7, #8]
GPIO_Init(&SPI2pins);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc93 	bl	800045c <GPIO_Init>
//spi2 nss
SPI2pins.GPIO_Pin_Config.GPIO_PinNum = GPIO_PIN_12;
 8000b36:	230c      	movs	r3, #12
 8000b38:	723b      	strb	r3, [r7, #8]
GPIO_Init(&SPI2pins);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fc8d 	bl	800045c <GPIO_Init>
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	48000400 	.word	0x48000400

08000b50 <spi2_init>:
/*
 * spi2 config and init.
 */
void spi2_init()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
  SPI_Handle_t SPI2Handle;

  SPI2Handle.pSPIx = SPI2;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <spi2_init+0x38>)
 8000b58:	603b      	str	r3, [r7, #0]
  SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	717b      	strb	r3, [r7, #5]
  SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	713b      	strb	r3, [r7, #4]
  SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;//divid pck as per the need
 8000b62:	2303      	movs	r3, #3
 8000b64:	72bb      	strb	r3, [r7, #10]
  SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71bb      	strb	r3, [r7, #6]
  SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_SW_DI;//hardware slave management
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	727b      	strb	r3, [r7, #9]
  SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
  SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	723b      	strb	r3, [r7, #8]

  SPI_Init(&SPI2Handle);
 8000b76:	463b      	mov	r3, r7
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fead 	bl	80008d8 <SPI_Init>
}
 8000b7e:	bf00      	nop
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40003800 	.word	0x40003800

08000b8c <gpio_buttonInit>:
void gpio_buttonInit()
{	GPIO_Handle_t GpioButton;
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GpioButton.pGPIOx = GPIOC;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <gpio_buttonInit+0x2c>)
 8000b94:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_Pin_Config.GPIO_PinNum = GPIO_PIN_13;
 8000b96:	230d      	movs	r3, #13
 8000b98:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_Pin_Config.GPIO_PinMode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_Pin_Config.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	72bb      	strb	r3, [r7, #10]
	GpioButton.GPIO_Pin_Config.GPIO_PinPuPdCntrl = GPIO_PUPDR_NPUPD;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	733b      	strb	r3, [r7, #12]

	GPIO_Init(&GpioButton);
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc57 	bl	800045c <GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	48000800 	.word	0x48000800

08000bbc <delay>:
void delay()
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
	for (int i=0; i<500000/2; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	e002      	b.n	8000bce <delay+0x12>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <delay+0x28>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	ddf8      	ble.n	8000bc8 <delay+0xc>
	{

	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	0003d08f 	.word	0x0003d08f

08000be8 <SPI_ResponseVerify>:
//function to check whether the SPI received data is Ack or Nack
uint8_t SPI_ResponseVerify( uint8_t ackByte)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	if(ackByte == 0xF5)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2bf5      	cmp	r3, #245	; 0xf5
 8000bf6:	d101      	bne.n	8000bfc <SPI_ResponseVerify+0x14>
	{
		return 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <SPI_ResponseVerify+0x16>
	}
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <main>:

//main function
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
	uint8_t dummyByte = 0xFF;
 8000c12:	23ff      	movs	r3, #255	; 0xff
 8000c14:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyRead;
	//spi af config
	spi2_gpio_init();
 8000c16:	f7ff ff6d 	bl	8000af4 <spi2_gpio_init>
	gpio_buttonInit();
 8000c1a:	f7ff ffb7 	bl	8000b8c <gpio_buttonInit>
	//spi2 config and init
	spi2_init();
 8000c1e:	f7ff ff97 	bl	8000b50 <spi2_init>
	printf("SPI Init. done\n");
 8000c22:	487f      	ldr	r0, [pc, #508]	; (8000e20 <main+0x214>)
 8000c24:	f000 fa90 	bl	8001148 <puts>
	//spi2 enable.
	//Nss singal interally high to avoid modf error
//	SPI_SSIConfig(SPI2, ENABLE); only needed when software slave management is used
	//before enabling the spi2 peripheral make ssoe enable for the hardware slave management.
	SPI_SSOEConfig(SPI2, ENABLE);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	487e      	ldr	r0, [pc, #504]	; (8000e24 <main+0x218>)
 8000c2c:	f7ff fec4 	bl	80009b8 <SPI_SSOEConfig>
	while(1)
	{
		while( !GPIO_ReadInputPin(GPIOC, GPIO_PIN_13) );
 8000c30:	bf00      	nop
 8000c32:	210d      	movs	r1, #13
 8000c34:	487c      	ldr	r0, [pc, #496]	; (8000e28 <main+0x21c>)
 8000c36:	f7ff fdb9 	bl	80007ac <GPIO_ReadInputPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0f8      	beq.n	8000c32 <main+0x26>
		delay();
 8000c40:	f7ff ffbc 	bl	8000bbc <delay>
		SPI_peri_control(SPI2, ENABLE);
 8000c44:	2101      	movs	r1, #1
 8000c46:	4877      	ldr	r0, [pc, #476]	; (8000e24 <main+0x218>)
 8000c48:	f7ff fe9a 	bl	8000980 <SPI_peri_control>
		//Led control
		uint8_t commandCode = COMMAND_LED_CTRL;
 8000c4c:	2350      	movs	r3, #80	; 0x50
 8000c4e:	737b      	strb	r3, [r7, #13]
		uint8_t ackByte;
		uint8_t arg[2];
		SPI_SendData(SPI2, &commandCode, 1);
 8000c50:	f107 030d 	add.w	r3, r7, #13
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	4872      	ldr	r0, [pc, #456]	; (8000e24 <main+0x218>)
 8000c5a:	f7ff fec9 	bl	80009f0 <SPI_SendData>
		//when send a data it extects a data to be received that will set the rxne bit set.
		//to clear this a dummy read is done
		SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000c5e:	f107 030e 	add.w	r3, r7, #14
 8000c62:	2201      	movs	r2, #1
 8000c64:	4619      	mov	r1, r3
 8000c66:	486f      	ldr	r0, [pc, #444]	; (8000e24 <main+0x218>)
 8000c68:	f7ff fef9 	bl	8000a5e <SPI_ReceiveData>

		//send dummy data of 1 byte to fetch the receive data from the slave
		SPI_SendData(SPI2, &dummyByte, 1);
 8000c6c:	f107 030f 	add.w	r3, r7, #15
 8000c70:	2201      	movs	r2, #1
 8000c72:	4619      	mov	r1, r3
 8000c74:	486b      	ldr	r0, [pc, #428]	; (8000e24 <main+0x218>)
 8000c76:	f7ff febb 	bl	80009f0 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackByte, 1);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4619      	mov	r1, r3
 8000c82:	4868      	ldr	r0, [pc, #416]	; (8000e24 <main+0x218>)
 8000c84:	f7ff feeb 	bl	8000a5e <SPI_ReceiveData>
		//check ackByte.
		if(SPI_ResponseVerify(ackByte))
 8000c88:	7b3b      	ldrb	r3, [r7, #12]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffac 	bl	8000be8 <SPI_ResponseVerify>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00d      	beq.n	8000cb2 <main+0xa6>
		{
			arg[0] = LED_PIN;
 8000c96:	2309      	movs	r3, #9
 8000c98:	723b      	strb	r3, [r7, #8]
			arg[1] = LED_ON;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	727b      	strb	r3, [r7, #9]
			SPI_SendData(SPI2, arg, 2);
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	485f      	ldr	r0, [pc, #380]	; (8000e24 <main+0x218>)
 8000ca8:	f7ff fea2 	bl	80009f0 <SPI_SendData>
			printf("COMMAND_LED_CTRL Executed\n");
 8000cac:	485f      	ldr	r0, [pc, #380]	; (8000e2c <main+0x220>)
 8000cae:	f000 fa4b 	bl	8001148 <puts>

		}
		//analog read.
		while( !GPIO_ReadInputPin(GPIOC, GPIO_PIN_13) );
 8000cb2:	bf00      	nop
 8000cb4:	210d      	movs	r1, #13
 8000cb6:	485c      	ldr	r0, [pc, #368]	; (8000e28 <main+0x21c>)
 8000cb8:	f7ff fd78 	bl	80007ac <GPIO_ReadInputPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f8      	beq.n	8000cb4 <main+0xa8>
		delay();
 8000cc2:	f7ff ff7b 	bl	8000bbc <delay>
		commandCode = COMMAND_SENSOR_READ;
 8000cc6:	2351      	movs	r3, #81	; 0x51
 8000cc8:	737b      	strb	r3, [r7, #13]
		SPI_SendData(SPI2, &commandCode, 1);
 8000cca:	f107 030d 	add.w	r3, r7, #13
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4854      	ldr	r0, [pc, #336]	; (8000e24 <main+0x218>)
 8000cd4:	f7ff fe8c 	bl	80009f0 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000cd8:	f107 030e 	add.w	r3, r7, #14
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4850      	ldr	r0, [pc, #320]	; (8000e24 <main+0x218>)
 8000ce2:	f7ff febc 	bl	8000a5e <SPI_ReceiveData>
		SPI_SendData(SPI2, &dummyByte, 1);
 8000ce6:	f107 030f 	add.w	r3, r7, #15
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	484d      	ldr	r0, [pc, #308]	; (8000e24 <main+0x218>)
 8000cf0:	f7ff fe7e 	bl	80009f0 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackByte, 1);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4849      	ldr	r0, [pc, #292]	; (8000e24 <main+0x218>)
 8000cfe:	f7ff feae 	bl	8000a5e <SPI_ReceiveData>
		//check ackByte.
		if(SPI_ResponseVerify(ackByte))
 8000d02:	7b3b      	ldrb	r3, [r7, #12]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff6f 	bl	8000be8 <SPI_ResponseVerify>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d023      	beq.n	8000d58 <main+0x14c>
		{
			arg[0] = ANALOG_PIN0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	723b      	strb	r3, [r7, #8]

			SPI_SendData(SPI2, arg, 1);
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4841      	ldr	r0, [pc, #260]	; (8000e24 <main+0x218>)
 8000d1e:	f7ff fe67 	bl	80009f0 <SPI_SendData>

			SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000d22:	f107 030e 	add.w	r3, r7, #14
 8000d26:	2201      	movs	r2, #1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	483e      	ldr	r0, [pc, #248]	; (8000e24 <main+0x218>)
 8000d2c:	f7ff fe97 	bl	8000a5e <SPI_ReceiveData>
			//put delay so that the slave can complete the analog conversion.
			delay();
 8000d30:	f7ff ff44 	bl	8000bbc <delay>
			SPI_SendData(SPI2, &dummyByte, 1); // to read response on the analog pin
 8000d34:	f107 030f 	add.w	r3, r7, #15
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4839      	ldr	r0, [pc, #228]	; (8000e24 <main+0x218>)
 8000d3e:	f7ff fe57 	bl	80009f0 <SPI_SendData>
			uint8_t analogRead;
			SPI_ReceiveData(SPI2, &analogRead, 1);
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	4836      	ldr	r0, [pc, #216]	; (8000e24 <main+0x218>)
 8000d4a:	f7ff fe88 	bl	8000a5e <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n",analogRead);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4837      	ldr	r0, [pc, #220]	; (8000e30 <main+0x224>)
 8000d54:	f000 f972 	bl	800103c <iprintf>
		}
		//Led status

		while( !GPIO_ReadInputPin(GPIOC, GPIO_PIN_13) );
 8000d58:	bf00      	nop
 8000d5a:	210d      	movs	r1, #13
 8000d5c:	4832      	ldr	r0, [pc, #200]	; (8000e28 <main+0x21c>)
 8000d5e:	f7ff fd25 	bl	80007ac <GPIO_ReadInputPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f8      	beq.n	8000d5a <main+0x14e>
		delay();
 8000d68:	f7ff ff28 	bl	8000bbc <delay>
		commandCode = COMMAND_LED_READ;
 8000d6c:	2352      	movs	r3, #82	; 0x52
 8000d6e:	737b      	strb	r3, [r7, #13]
		SPI_SendData(SPI2, &commandCode, 1);
 8000d70:	f107 030d 	add.w	r3, r7, #13
 8000d74:	2201      	movs	r2, #1
 8000d76:	4619      	mov	r1, r3
 8000d78:	482a      	ldr	r0, [pc, #168]	; (8000e24 <main+0x218>)
 8000d7a:	f7ff fe39 	bl	80009f0 <SPI_SendData>
		SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000d7e:	f107 030e 	add.w	r3, r7, #14
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	4827      	ldr	r0, [pc, #156]	; (8000e24 <main+0x218>)
 8000d88:	f7ff fe69 	bl	8000a5e <SPI_ReceiveData>
		SPI_SendData(SPI2, &dummyByte, 1);
 8000d8c:	f107 030f 	add.w	r3, r7, #15
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	4823      	ldr	r0, [pc, #140]	; (8000e24 <main+0x218>)
 8000d96:	f7ff fe2b 	bl	80009f0 <SPI_SendData>
		SPI_ReceiveData(SPI2, &ackByte, 1);
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	4820      	ldr	r0, [pc, #128]	; (8000e24 <main+0x218>)
 8000da4:	f7ff fe5b 	bl	8000a5e <SPI_ReceiveData>
		//check ackByte.
		if(SPI_ResponseVerify(ackByte))
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff1c 	bl	8000be8 <SPI_ResponseVerify>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d023      	beq.n	8000dfe <main+0x1f2>
		{
			arg[0] = LED_PIN;
 8000db6:	2309      	movs	r3, #9
 8000db8:	723b      	strb	r3, [r7, #8]

			SPI_SendData(SPI2, arg, 1);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4818      	ldr	r0, [pc, #96]	; (8000e24 <main+0x218>)
 8000dc4:	f7ff fe14 	bl	80009f0 <SPI_SendData>

			SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000dc8:	f107 030e 	add.w	r3, r7, #14
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <main+0x218>)
 8000dd2:	f7ff fe44 	bl	8000a5e <SPI_ReceiveData>
			//put delay so that the slave can complete the analog conversion.
			delay();
 8000dd6:	f7ff fef1 	bl	8000bbc <delay>
			SPI_SendData(SPI2, &dummyByte, 1); // to read response on the analog pin
 8000dda:	f107 030f 	add.w	r3, r7, #15
 8000dde:	2201      	movs	r2, #1
 8000de0:	4619      	mov	r1, r3
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <main+0x218>)
 8000de4:	f7ff fe04 	bl	80009f0 <SPI_SendData>
			uint8_t ledStatus;
			SPI_ReceiveData(SPI2, &ledStatus, 1);
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <main+0x218>)
 8000df0:	f7ff fe35 	bl	8000a5e <SPI_ReceiveData>
			printf("command read led: %d",ledStatus);
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	4619      	mov	r1, r3
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <main+0x228>)
 8000dfa:	f000 f91f 	bl	800103c <iprintf>
		}
		while (SPIgetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000dfe:	bf00      	nop
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <main+0x218>)
 8000e04:	f7ff fe62 	bl	8000acc <SPIgetFlagStatus>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f8      	bne.n	8000e00 <main+0x1f4>
		SPI_peri_control(SPI2, DISABLE);//close the peripheral
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <main+0x218>)
 8000e12:	f7ff fdb5 	bl	8000980 <SPI_peri_control>
		printf("SPI Communication Closed\n");
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <main+0x22c>)
 8000e18:	f000 f996 	bl	8001148 <puts>
	{
 8000e1c:	e708      	b.n	8000c30 <main+0x24>
 8000e1e:	bf00      	nop
 8000e20:	08001fec 	.word	0x08001fec
 8000e24:	40003800 	.word	0x40003800
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	08001ffc 	.word	0x08001ffc
 8000e30:	08002018 	.word	0x08002018
 8000e34:	08002030 	.word	0x08002030
 8000e38:	08002048 	.word	0x08002048

08000e3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4601      	mov	r1, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	b2ca      	uxtb	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf0      	blt.n	8000e4e <_read+0x12>
	}

return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e009      	b.n	8000e9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf1      	blt.n	8000e88 <_write+0x12>
	}
	return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:

int _close(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:

int _isatty(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f000 f846 	bl	8000fd8 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20010000 	.word	0x20010000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	20000090 	.word	0x20000090
 8000f80:	200000b0 	.word	0x200000b0

08000f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f88:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb2:	f000 f817 	bl	8000fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff fe29 	bl	8000c0c <main>

08000fba <LoopForever>:

LoopForever:
    b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   r0, =_estack
 8000fbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fc8:	08002104 	.word	0x08002104
  ldr r2, =_sbss
 8000fcc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fd0:	200000ac 	.word	0x200000ac

08000fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_2_IRQHandler>
	...

08000fd8 <__errno>:
 8000fd8:	4b01      	ldr	r3, [pc, #4]	; (8000fe0 <__errno+0x8>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000010 	.word	0x20000010

08000fe4 <__libc_init_array>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	4d0d      	ldr	r5, [pc, #52]	; (800101c <__libc_init_array+0x38>)
 8000fe8:	4c0d      	ldr	r4, [pc, #52]	; (8001020 <__libc_init_array+0x3c>)
 8000fea:	1b64      	subs	r4, r4, r5
 8000fec:	10a4      	asrs	r4, r4, #2
 8000fee:	2600      	movs	r6, #0
 8000ff0:	42a6      	cmp	r6, r4
 8000ff2:	d109      	bne.n	8001008 <__libc_init_array+0x24>
 8000ff4:	4d0b      	ldr	r5, [pc, #44]	; (8001024 <__libc_init_array+0x40>)
 8000ff6:	4c0c      	ldr	r4, [pc, #48]	; (8001028 <__libc_init_array+0x44>)
 8000ff8:	f000 ffec 	bl	8001fd4 <_init>
 8000ffc:	1b64      	subs	r4, r4, r5
 8000ffe:	10a4      	asrs	r4, r4, #2
 8001000:	2600      	movs	r6, #0
 8001002:	42a6      	cmp	r6, r4
 8001004:	d105      	bne.n	8001012 <__libc_init_array+0x2e>
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	f855 3b04 	ldr.w	r3, [r5], #4
 800100c:	4798      	blx	r3
 800100e:	3601      	adds	r6, #1
 8001010:	e7ee      	b.n	8000ff0 <__libc_init_array+0xc>
 8001012:	f855 3b04 	ldr.w	r3, [r5], #4
 8001016:	4798      	blx	r3
 8001018:	3601      	adds	r6, #1
 800101a:	e7f2      	b.n	8001002 <__libc_init_array+0x1e>
 800101c:	080020fc 	.word	0x080020fc
 8001020:	080020fc 	.word	0x080020fc
 8001024:	080020fc 	.word	0x080020fc
 8001028:	08002100 	.word	0x08002100

0800102c <memset>:
 800102c:	4402      	add	r2, r0
 800102e:	4603      	mov	r3, r0
 8001030:	4293      	cmp	r3, r2
 8001032:	d100      	bne.n	8001036 <memset+0xa>
 8001034:	4770      	bx	lr
 8001036:	f803 1b01 	strb.w	r1, [r3], #1
 800103a:	e7f9      	b.n	8001030 <memset+0x4>

0800103c <iprintf>:
 800103c:	b40f      	push	{r0, r1, r2, r3}
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <iprintf+0x2c>)
 8001040:	b513      	push	{r0, r1, r4, lr}
 8001042:	681c      	ldr	r4, [r3, #0]
 8001044:	b124      	cbz	r4, 8001050 <iprintf+0x14>
 8001046:	69a3      	ldr	r3, [r4, #24]
 8001048:	b913      	cbnz	r3, 8001050 <iprintf+0x14>
 800104a:	4620      	mov	r0, r4
 800104c:	f000 fa5e 	bl	800150c <__sinit>
 8001050:	ab05      	add	r3, sp, #20
 8001052:	9a04      	ldr	r2, [sp, #16]
 8001054:	68a1      	ldr	r1, [r4, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4620      	mov	r0, r4
 800105a:	f000 fc2f 	bl	80018bc <_vfiprintf_r>
 800105e:	b002      	add	sp, #8
 8001060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001064:	b004      	add	sp, #16
 8001066:	4770      	bx	lr
 8001068:	20000010 	.word	0x20000010

0800106c <_puts_r>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	460e      	mov	r6, r1
 8001070:	4605      	mov	r5, r0
 8001072:	b118      	cbz	r0, 800107c <_puts_r+0x10>
 8001074:	6983      	ldr	r3, [r0, #24]
 8001076:	b90b      	cbnz	r3, 800107c <_puts_r+0x10>
 8001078:	f000 fa48 	bl	800150c <__sinit>
 800107c:	69ab      	ldr	r3, [r5, #24]
 800107e:	68ac      	ldr	r4, [r5, #8]
 8001080:	b913      	cbnz	r3, 8001088 <_puts_r+0x1c>
 8001082:	4628      	mov	r0, r5
 8001084:	f000 fa42 	bl	800150c <__sinit>
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <_puts_r+0xd0>)
 800108a:	429c      	cmp	r4, r3
 800108c:	d120      	bne.n	80010d0 <_puts_r+0x64>
 800108e:	686c      	ldr	r4, [r5, #4]
 8001090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001092:	07db      	lsls	r3, r3, #31
 8001094:	d405      	bmi.n	80010a2 <_puts_r+0x36>
 8001096:	89a3      	ldrh	r3, [r4, #12]
 8001098:	0598      	lsls	r0, r3, #22
 800109a:	d402      	bmi.n	80010a2 <_puts_r+0x36>
 800109c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800109e:	f000 fad3 	bl	8001648 <__retarget_lock_acquire_recursive>
 80010a2:	89a3      	ldrh	r3, [r4, #12]
 80010a4:	0719      	lsls	r1, r3, #28
 80010a6:	d51d      	bpl.n	80010e4 <_puts_r+0x78>
 80010a8:	6923      	ldr	r3, [r4, #16]
 80010aa:	b1db      	cbz	r3, 80010e4 <_puts_r+0x78>
 80010ac:	3e01      	subs	r6, #1
 80010ae:	68a3      	ldr	r3, [r4, #8]
 80010b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010b4:	3b01      	subs	r3, #1
 80010b6:	60a3      	str	r3, [r4, #8]
 80010b8:	bb39      	cbnz	r1, 800110a <_puts_r+0x9e>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da38      	bge.n	8001130 <_puts_r+0xc4>
 80010be:	4622      	mov	r2, r4
 80010c0:	210a      	movs	r1, #10
 80010c2:	4628      	mov	r0, r5
 80010c4:	f000 f848 	bl	8001158 <__swbuf_r>
 80010c8:	3001      	adds	r0, #1
 80010ca:	d011      	beq.n	80010f0 <_puts_r+0x84>
 80010cc:	250a      	movs	r5, #10
 80010ce:	e011      	b.n	80010f4 <_puts_r+0x88>
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <_puts_r+0xd4>)
 80010d2:	429c      	cmp	r4, r3
 80010d4:	d101      	bne.n	80010da <_puts_r+0x6e>
 80010d6:	68ac      	ldr	r4, [r5, #8]
 80010d8:	e7da      	b.n	8001090 <_puts_r+0x24>
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <_puts_r+0xd8>)
 80010dc:	429c      	cmp	r4, r3
 80010de:	bf08      	it	eq
 80010e0:	68ec      	ldreq	r4, [r5, #12]
 80010e2:	e7d5      	b.n	8001090 <_puts_r+0x24>
 80010e4:	4621      	mov	r1, r4
 80010e6:	4628      	mov	r0, r5
 80010e8:	f000 f888 	bl	80011fc <__swsetup_r>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d0dd      	beq.n	80010ac <_puts_r+0x40>
 80010f0:	f04f 35ff 	mov.w	r5, #4294967295
 80010f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010f6:	07da      	lsls	r2, r3, #31
 80010f8:	d405      	bmi.n	8001106 <_puts_r+0x9a>
 80010fa:	89a3      	ldrh	r3, [r4, #12]
 80010fc:	059b      	lsls	r3, r3, #22
 80010fe:	d402      	bmi.n	8001106 <_puts_r+0x9a>
 8001100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001102:	f000 faa2 	bl	800164a <__retarget_lock_release_recursive>
 8001106:	4628      	mov	r0, r5
 8001108:	bd70      	pop	{r4, r5, r6, pc}
 800110a:	2b00      	cmp	r3, #0
 800110c:	da04      	bge.n	8001118 <_puts_r+0xac>
 800110e:	69a2      	ldr	r2, [r4, #24]
 8001110:	429a      	cmp	r2, r3
 8001112:	dc06      	bgt.n	8001122 <_puts_r+0xb6>
 8001114:	290a      	cmp	r1, #10
 8001116:	d004      	beq.n	8001122 <_puts_r+0xb6>
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	6022      	str	r2, [r4, #0]
 800111e:	7019      	strb	r1, [r3, #0]
 8001120:	e7c5      	b.n	80010ae <_puts_r+0x42>
 8001122:	4622      	mov	r2, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f817 	bl	8001158 <__swbuf_r>
 800112a:	3001      	adds	r0, #1
 800112c:	d1bf      	bne.n	80010ae <_puts_r+0x42>
 800112e:	e7df      	b.n	80010f0 <_puts_r+0x84>
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	250a      	movs	r5, #10
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	6022      	str	r2, [r4, #0]
 8001138:	701d      	strb	r5, [r3, #0]
 800113a:	e7db      	b.n	80010f4 <_puts_r+0x88>
 800113c:	08002088 	.word	0x08002088
 8001140:	080020a8 	.word	0x080020a8
 8001144:	08002068 	.word	0x08002068

08001148 <puts>:
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <puts+0xc>)
 800114a:	4601      	mov	r1, r0
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f7ff bf8d 	b.w	800106c <_puts_r>
 8001152:	bf00      	nop
 8001154:	20000010 	.word	0x20000010

08001158 <__swbuf_r>:
 8001158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115a:	460e      	mov	r6, r1
 800115c:	4614      	mov	r4, r2
 800115e:	4605      	mov	r5, r0
 8001160:	b118      	cbz	r0, 800116a <__swbuf_r+0x12>
 8001162:	6983      	ldr	r3, [r0, #24]
 8001164:	b90b      	cbnz	r3, 800116a <__swbuf_r+0x12>
 8001166:	f000 f9d1 	bl	800150c <__sinit>
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <__swbuf_r+0x98>)
 800116c:	429c      	cmp	r4, r3
 800116e:	d12b      	bne.n	80011c8 <__swbuf_r+0x70>
 8001170:	686c      	ldr	r4, [r5, #4]
 8001172:	69a3      	ldr	r3, [r4, #24]
 8001174:	60a3      	str	r3, [r4, #8]
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	071a      	lsls	r2, r3, #28
 800117a:	d52f      	bpl.n	80011dc <__swbuf_r+0x84>
 800117c:	6923      	ldr	r3, [r4, #16]
 800117e:	b36b      	cbz	r3, 80011dc <__swbuf_r+0x84>
 8001180:	6923      	ldr	r3, [r4, #16]
 8001182:	6820      	ldr	r0, [r4, #0]
 8001184:	1ac0      	subs	r0, r0, r3
 8001186:	6963      	ldr	r3, [r4, #20]
 8001188:	b2f6      	uxtb	r6, r6
 800118a:	4283      	cmp	r3, r0
 800118c:	4637      	mov	r7, r6
 800118e:	dc04      	bgt.n	800119a <__swbuf_r+0x42>
 8001190:	4621      	mov	r1, r4
 8001192:	4628      	mov	r0, r5
 8001194:	f000 f926 	bl	80013e4 <_fflush_r>
 8001198:	bb30      	cbnz	r0, 80011e8 <__swbuf_r+0x90>
 800119a:	68a3      	ldr	r3, [r4, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60a3      	str	r3, [r4, #8]
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	6022      	str	r2, [r4, #0]
 80011a6:	701e      	strb	r6, [r3, #0]
 80011a8:	6963      	ldr	r3, [r4, #20]
 80011aa:	3001      	adds	r0, #1
 80011ac:	4283      	cmp	r3, r0
 80011ae:	d004      	beq.n	80011ba <__swbuf_r+0x62>
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	07db      	lsls	r3, r3, #31
 80011b4:	d506      	bpl.n	80011c4 <__swbuf_r+0x6c>
 80011b6:	2e0a      	cmp	r6, #10
 80011b8:	d104      	bne.n	80011c4 <__swbuf_r+0x6c>
 80011ba:	4621      	mov	r1, r4
 80011bc:	4628      	mov	r0, r5
 80011be:	f000 f911 	bl	80013e4 <_fflush_r>
 80011c2:	b988      	cbnz	r0, 80011e8 <__swbuf_r+0x90>
 80011c4:	4638      	mov	r0, r7
 80011c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <__swbuf_r+0x9c>)
 80011ca:	429c      	cmp	r4, r3
 80011cc:	d101      	bne.n	80011d2 <__swbuf_r+0x7a>
 80011ce:	68ac      	ldr	r4, [r5, #8]
 80011d0:	e7cf      	b.n	8001172 <__swbuf_r+0x1a>
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <__swbuf_r+0xa0>)
 80011d4:	429c      	cmp	r4, r3
 80011d6:	bf08      	it	eq
 80011d8:	68ec      	ldreq	r4, [r5, #12]
 80011da:	e7ca      	b.n	8001172 <__swbuf_r+0x1a>
 80011dc:	4621      	mov	r1, r4
 80011de:	4628      	mov	r0, r5
 80011e0:	f000 f80c 	bl	80011fc <__swsetup_r>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0cb      	beq.n	8001180 <__swbuf_r+0x28>
 80011e8:	f04f 37ff 	mov.w	r7, #4294967295
 80011ec:	e7ea      	b.n	80011c4 <__swbuf_r+0x6c>
 80011ee:	bf00      	nop
 80011f0:	08002088 	.word	0x08002088
 80011f4:	080020a8 	.word	0x080020a8
 80011f8:	08002068 	.word	0x08002068

080011fc <__swsetup_r>:
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <__swsetup_r+0xcc>)
 80011fe:	b570      	push	{r4, r5, r6, lr}
 8001200:	681d      	ldr	r5, [r3, #0]
 8001202:	4606      	mov	r6, r0
 8001204:	460c      	mov	r4, r1
 8001206:	b125      	cbz	r5, 8001212 <__swsetup_r+0x16>
 8001208:	69ab      	ldr	r3, [r5, #24]
 800120a:	b913      	cbnz	r3, 8001212 <__swsetup_r+0x16>
 800120c:	4628      	mov	r0, r5
 800120e:	f000 f97d 	bl	800150c <__sinit>
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <__swsetup_r+0xd0>)
 8001214:	429c      	cmp	r4, r3
 8001216:	d10f      	bne.n	8001238 <__swsetup_r+0x3c>
 8001218:	686c      	ldr	r4, [r5, #4]
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001220:	0719      	lsls	r1, r3, #28
 8001222:	d42c      	bmi.n	800127e <__swsetup_r+0x82>
 8001224:	06dd      	lsls	r5, r3, #27
 8001226:	d411      	bmi.n	800124c <__swsetup_r+0x50>
 8001228:	2309      	movs	r3, #9
 800122a:	6033      	str	r3, [r6, #0]
 800122c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	f04f 30ff 	mov.w	r0, #4294967295
 8001236:	e03e      	b.n	80012b6 <__swsetup_r+0xba>
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <__swsetup_r+0xd4>)
 800123a:	429c      	cmp	r4, r3
 800123c:	d101      	bne.n	8001242 <__swsetup_r+0x46>
 800123e:	68ac      	ldr	r4, [r5, #8]
 8001240:	e7eb      	b.n	800121a <__swsetup_r+0x1e>
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <__swsetup_r+0xd8>)
 8001244:	429c      	cmp	r4, r3
 8001246:	bf08      	it	eq
 8001248:	68ec      	ldreq	r4, [r5, #12]
 800124a:	e7e6      	b.n	800121a <__swsetup_r+0x1e>
 800124c:	0758      	lsls	r0, r3, #29
 800124e:	d512      	bpl.n	8001276 <__swsetup_r+0x7a>
 8001250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001252:	b141      	cbz	r1, 8001266 <__swsetup_r+0x6a>
 8001254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001258:	4299      	cmp	r1, r3
 800125a:	d002      	beq.n	8001262 <__swsetup_r+0x66>
 800125c:	4630      	mov	r0, r6
 800125e:	f000 fa59 	bl	8001714 <_free_r>
 8001262:	2300      	movs	r3, #0
 8001264:	6363      	str	r3, [r4, #52]	; 0x34
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800126c:	81a3      	strh	r3, [r4, #12]
 800126e:	2300      	movs	r3, #0
 8001270:	6063      	str	r3, [r4, #4]
 8001272:	6923      	ldr	r3, [r4, #16]
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	81a3      	strh	r3, [r4, #12]
 800127e:	6923      	ldr	r3, [r4, #16]
 8001280:	b94b      	cbnz	r3, 8001296 <__swsetup_r+0x9a>
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800128c:	d003      	beq.n	8001296 <__swsetup_r+0x9a>
 800128e:	4621      	mov	r1, r4
 8001290:	4630      	mov	r0, r6
 8001292:	f000 f9ff 	bl	8001694 <__smakebuf_r>
 8001296:	89a0      	ldrh	r0, [r4, #12]
 8001298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800129c:	f010 0301 	ands.w	r3, r0, #1
 80012a0:	d00a      	beq.n	80012b8 <__swsetup_r+0xbc>
 80012a2:	2300      	movs	r3, #0
 80012a4:	60a3      	str	r3, [r4, #8]
 80012a6:	6963      	ldr	r3, [r4, #20]
 80012a8:	425b      	negs	r3, r3
 80012aa:	61a3      	str	r3, [r4, #24]
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	b943      	cbnz	r3, 80012c2 <__swsetup_r+0xc6>
 80012b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012b4:	d1ba      	bne.n	800122c <__swsetup_r+0x30>
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
 80012b8:	0781      	lsls	r1, r0, #30
 80012ba:	bf58      	it	pl
 80012bc:	6963      	ldrpl	r3, [r4, #20]
 80012be:	60a3      	str	r3, [r4, #8]
 80012c0:	e7f4      	b.n	80012ac <__swsetup_r+0xb0>
 80012c2:	2000      	movs	r0, #0
 80012c4:	e7f7      	b.n	80012b6 <__swsetup_r+0xba>
 80012c6:	bf00      	nop
 80012c8:	20000010 	.word	0x20000010
 80012cc:	08002088 	.word	0x08002088
 80012d0:	080020a8 	.word	0x080020a8
 80012d4:	08002068 	.word	0x08002068

080012d8 <__sflush_r>:
 80012d8:	898a      	ldrh	r2, [r1, #12]
 80012da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012de:	4605      	mov	r5, r0
 80012e0:	0710      	lsls	r0, r2, #28
 80012e2:	460c      	mov	r4, r1
 80012e4:	d458      	bmi.n	8001398 <__sflush_r+0xc0>
 80012e6:	684b      	ldr	r3, [r1, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dc05      	bgt.n	80012f8 <__sflush_r+0x20>
 80012ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	dc02      	bgt.n	80012f8 <__sflush_r+0x20>
 80012f2:	2000      	movs	r0, #0
 80012f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d0f9      	beq.n	80012f2 <__sflush_r+0x1a>
 80012fe:	2300      	movs	r3, #0
 8001300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001304:	682f      	ldr	r7, [r5, #0]
 8001306:	602b      	str	r3, [r5, #0]
 8001308:	d032      	beq.n	8001370 <__sflush_r+0x98>
 800130a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800130c:	89a3      	ldrh	r3, [r4, #12]
 800130e:	075a      	lsls	r2, r3, #29
 8001310:	d505      	bpl.n	800131e <__sflush_r+0x46>
 8001312:	6863      	ldr	r3, [r4, #4]
 8001314:	1ac0      	subs	r0, r0, r3
 8001316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001318:	b10b      	cbz	r3, 800131e <__sflush_r+0x46>
 800131a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800131c:	1ac0      	subs	r0, r0, r3
 800131e:	2300      	movs	r3, #0
 8001320:	4602      	mov	r2, r0
 8001322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001324:	6a21      	ldr	r1, [r4, #32]
 8001326:	4628      	mov	r0, r5
 8001328:	47b0      	blx	r6
 800132a:	1c43      	adds	r3, r0, #1
 800132c:	89a3      	ldrh	r3, [r4, #12]
 800132e:	d106      	bne.n	800133e <__sflush_r+0x66>
 8001330:	6829      	ldr	r1, [r5, #0]
 8001332:	291d      	cmp	r1, #29
 8001334:	d82c      	bhi.n	8001390 <__sflush_r+0xb8>
 8001336:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <__sflush_r+0x108>)
 8001338:	40ca      	lsrs	r2, r1
 800133a:	07d6      	lsls	r6, r2, #31
 800133c:	d528      	bpl.n	8001390 <__sflush_r+0xb8>
 800133e:	2200      	movs	r2, #0
 8001340:	6062      	str	r2, [r4, #4]
 8001342:	04d9      	lsls	r1, r3, #19
 8001344:	6922      	ldr	r2, [r4, #16]
 8001346:	6022      	str	r2, [r4, #0]
 8001348:	d504      	bpl.n	8001354 <__sflush_r+0x7c>
 800134a:	1c42      	adds	r2, r0, #1
 800134c:	d101      	bne.n	8001352 <__sflush_r+0x7a>
 800134e:	682b      	ldr	r3, [r5, #0]
 8001350:	b903      	cbnz	r3, 8001354 <__sflush_r+0x7c>
 8001352:	6560      	str	r0, [r4, #84]	; 0x54
 8001354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001356:	602f      	str	r7, [r5, #0]
 8001358:	2900      	cmp	r1, #0
 800135a:	d0ca      	beq.n	80012f2 <__sflush_r+0x1a>
 800135c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001360:	4299      	cmp	r1, r3
 8001362:	d002      	beq.n	800136a <__sflush_r+0x92>
 8001364:	4628      	mov	r0, r5
 8001366:	f000 f9d5 	bl	8001714 <_free_r>
 800136a:	2000      	movs	r0, #0
 800136c:	6360      	str	r0, [r4, #52]	; 0x34
 800136e:	e7c1      	b.n	80012f4 <__sflush_r+0x1c>
 8001370:	6a21      	ldr	r1, [r4, #32]
 8001372:	2301      	movs	r3, #1
 8001374:	4628      	mov	r0, r5
 8001376:	47b0      	blx	r6
 8001378:	1c41      	adds	r1, r0, #1
 800137a:	d1c7      	bne.n	800130c <__sflush_r+0x34>
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0c4      	beq.n	800130c <__sflush_r+0x34>
 8001382:	2b1d      	cmp	r3, #29
 8001384:	d001      	beq.n	800138a <__sflush_r+0xb2>
 8001386:	2b16      	cmp	r3, #22
 8001388:	d101      	bne.n	800138e <__sflush_r+0xb6>
 800138a:	602f      	str	r7, [r5, #0]
 800138c:	e7b1      	b.n	80012f2 <__sflush_r+0x1a>
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001394:	81a3      	strh	r3, [r4, #12]
 8001396:	e7ad      	b.n	80012f4 <__sflush_r+0x1c>
 8001398:	690f      	ldr	r7, [r1, #16]
 800139a:	2f00      	cmp	r7, #0
 800139c:	d0a9      	beq.n	80012f2 <__sflush_r+0x1a>
 800139e:	0793      	lsls	r3, r2, #30
 80013a0:	680e      	ldr	r6, [r1, #0]
 80013a2:	bf08      	it	eq
 80013a4:	694b      	ldreq	r3, [r1, #20]
 80013a6:	600f      	str	r7, [r1, #0]
 80013a8:	bf18      	it	ne
 80013aa:	2300      	movne	r3, #0
 80013ac:	eba6 0807 	sub.w	r8, r6, r7
 80013b0:	608b      	str	r3, [r1, #8]
 80013b2:	f1b8 0f00 	cmp.w	r8, #0
 80013b6:	dd9c      	ble.n	80012f2 <__sflush_r+0x1a>
 80013b8:	6a21      	ldr	r1, [r4, #32]
 80013ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013bc:	4643      	mov	r3, r8
 80013be:	463a      	mov	r2, r7
 80013c0:	4628      	mov	r0, r5
 80013c2:	47b0      	blx	r6
 80013c4:	2800      	cmp	r0, #0
 80013c6:	dc06      	bgt.n	80013d6 <__sflush_r+0xfe>
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	81a3      	strh	r3, [r4, #12]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	e78e      	b.n	80012f4 <__sflush_r+0x1c>
 80013d6:	4407      	add	r7, r0
 80013d8:	eba8 0800 	sub.w	r8, r8, r0
 80013dc:	e7e9      	b.n	80013b2 <__sflush_r+0xda>
 80013de:	bf00      	nop
 80013e0:	20400001 	.word	0x20400001

080013e4 <_fflush_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	690b      	ldr	r3, [r1, #16]
 80013e8:	4605      	mov	r5, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	b913      	cbnz	r3, 80013f4 <_fflush_r+0x10>
 80013ee:	2500      	movs	r5, #0
 80013f0:	4628      	mov	r0, r5
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	b118      	cbz	r0, 80013fe <_fflush_r+0x1a>
 80013f6:	6983      	ldr	r3, [r0, #24]
 80013f8:	b90b      	cbnz	r3, 80013fe <_fflush_r+0x1a>
 80013fa:	f000 f887 	bl	800150c <__sinit>
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <_fflush_r+0x6c>)
 8001400:	429c      	cmp	r4, r3
 8001402:	d11b      	bne.n	800143c <_fflush_r+0x58>
 8001404:	686c      	ldr	r4, [r5, #4]
 8001406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0ef      	beq.n	80013ee <_fflush_r+0xa>
 800140e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001410:	07d0      	lsls	r0, r2, #31
 8001412:	d404      	bmi.n	800141e <_fflush_r+0x3a>
 8001414:	0599      	lsls	r1, r3, #22
 8001416:	d402      	bmi.n	800141e <_fflush_r+0x3a>
 8001418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800141a:	f000 f915 	bl	8001648 <__retarget_lock_acquire_recursive>
 800141e:	4628      	mov	r0, r5
 8001420:	4621      	mov	r1, r4
 8001422:	f7ff ff59 	bl	80012d8 <__sflush_r>
 8001426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001428:	07da      	lsls	r2, r3, #31
 800142a:	4605      	mov	r5, r0
 800142c:	d4e0      	bmi.n	80013f0 <_fflush_r+0xc>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	059b      	lsls	r3, r3, #22
 8001432:	d4dd      	bmi.n	80013f0 <_fflush_r+0xc>
 8001434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001436:	f000 f908 	bl	800164a <__retarget_lock_release_recursive>
 800143a:	e7d9      	b.n	80013f0 <_fflush_r+0xc>
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <_fflush_r+0x70>)
 800143e:	429c      	cmp	r4, r3
 8001440:	d101      	bne.n	8001446 <_fflush_r+0x62>
 8001442:	68ac      	ldr	r4, [r5, #8]
 8001444:	e7df      	b.n	8001406 <_fflush_r+0x22>
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <_fflush_r+0x74>)
 8001448:	429c      	cmp	r4, r3
 800144a:	bf08      	it	eq
 800144c:	68ec      	ldreq	r4, [r5, #12]
 800144e:	e7da      	b.n	8001406 <_fflush_r+0x22>
 8001450:	08002088 	.word	0x08002088
 8001454:	080020a8 	.word	0x080020a8
 8001458:	08002068 	.word	0x08002068

0800145c <std>:
 800145c:	2300      	movs	r3, #0
 800145e:	b510      	push	{r4, lr}
 8001460:	4604      	mov	r4, r0
 8001462:	e9c0 3300 	strd	r3, r3, [r0]
 8001466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800146a:	6083      	str	r3, [r0, #8]
 800146c:	8181      	strh	r1, [r0, #12]
 800146e:	6643      	str	r3, [r0, #100]	; 0x64
 8001470:	81c2      	strh	r2, [r0, #14]
 8001472:	6183      	str	r3, [r0, #24]
 8001474:	4619      	mov	r1, r3
 8001476:	2208      	movs	r2, #8
 8001478:	305c      	adds	r0, #92	; 0x5c
 800147a:	f7ff fdd7 	bl	800102c <memset>
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <std+0x38>)
 8001480:	6263      	str	r3, [r4, #36]	; 0x24
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <std+0x3c>)
 8001484:	62a3      	str	r3, [r4, #40]	; 0x28
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <std+0x40>)
 8001488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <std+0x44>)
 800148c:	6224      	str	r4, [r4, #32]
 800148e:	6323      	str	r3, [r4, #48]	; 0x30
 8001490:	bd10      	pop	{r4, pc}
 8001492:	bf00      	nop
 8001494:	08001e65 	.word	0x08001e65
 8001498:	08001e87 	.word	0x08001e87
 800149c:	08001ebf 	.word	0x08001ebf
 80014a0:	08001ee3 	.word	0x08001ee3

080014a4 <_cleanup_r>:
 80014a4:	4901      	ldr	r1, [pc, #4]	; (80014ac <_cleanup_r+0x8>)
 80014a6:	f000 b8af 	b.w	8001608 <_fwalk_reent>
 80014aa:	bf00      	nop
 80014ac:	080013e5 	.word	0x080013e5

080014b0 <__sfmoreglue>:
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	1e4a      	subs	r2, r1, #1
 80014b4:	2568      	movs	r5, #104	; 0x68
 80014b6:	4355      	muls	r5, r2
 80014b8:	460e      	mov	r6, r1
 80014ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014be:	f000 f979 	bl	80017b4 <_malloc_r>
 80014c2:	4604      	mov	r4, r0
 80014c4:	b140      	cbz	r0, 80014d8 <__sfmoreglue+0x28>
 80014c6:	2100      	movs	r1, #0
 80014c8:	e9c0 1600 	strd	r1, r6, [r0]
 80014cc:	300c      	adds	r0, #12
 80014ce:	60a0      	str	r0, [r4, #8]
 80014d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014d4:	f7ff fdaa 	bl	800102c <memset>
 80014d8:	4620      	mov	r0, r4
 80014da:	bd70      	pop	{r4, r5, r6, pc}

080014dc <__sfp_lock_acquire>:
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <__sfp_lock_acquire+0x8>)
 80014de:	f000 b8b3 	b.w	8001648 <__retarget_lock_acquire_recursive>
 80014e2:	bf00      	nop
 80014e4:	200000a4 	.word	0x200000a4

080014e8 <__sfp_lock_release>:
 80014e8:	4801      	ldr	r0, [pc, #4]	; (80014f0 <__sfp_lock_release+0x8>)
 80014ea:	f000 b8ae 	b.w	800164a <__retarget_lock_release_recursive>
 80014ee:	bf00      	nop
 80014f0:	200000a4 	.word	0x200000a4

080014f4 <__sinit_lock_acquire>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__sinit_lock_acquire+0x8>)
 80014f6:	f000 b8a7 	b.w	8001648 <__retarget_lock_acquire_recursive>
 80014fa:	bf00      	nop
 80014fc:	2000009f 	.word	0x2000009f

08001500 <__sinit_lock_release>:
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <__sinit_lock_release+0x8>)
 8001502:	f000 b8a2 	b.w	800164a <__retarget_lock_release_recursive>
 8001506:	bf00      	nop
 8001508:	2000009f 	.word	0x2000009f

0800150c <__sinit>:
 800150c:	b510      	push	{r4, lr}
 800150e:	4604      	mov	r4, r0
 8001510:	f7ff fff0 	bl	80014f4 <__sinit_lock_acquire>
 8001514:	69a3      	ldr	r3, [r4, #24]
 8001516:	b11b      	cbz	r3, 8001520 <__sinit+0x14>
 8001518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800151c:	f7ff bff0 	b.w	8001500 <__sinit_lock_release>
 8001520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001524:	6523      	str	r3, [r4, #80]	; 0x50
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <__sinit+0x68>)
 8001528:	4a13      	ldr	r2, [pc, #76]	; (8001578 <__sinit+0x6c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	62a2      	str	r2, [r4, #40]	; 0x28
 800152e:	42a3      	cmp	r3, r4
 8001530:	bf04      	itt	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	61a3      	streq	r3, [r4, #24]
 8001536:	4620      	mov	r0, r4
 8001538:	f000 f820 	bl	800157c <__sfp>
 800153c:	6060      	str	r0, [r4, #4]
 800153e:	4620      	mov	r0, r4
 8001540:	f000 f81c 	bl	800157c <__sfp>
 8001544:	60a0      	str	r0, [r4, #8]
 8001546:	4620      	mov	r0, r4
 8001548:	f000 f818 	bl	800157c <__sfp>
 800154c:	2200      	movs	r2, #0
 800154e:	60e0      	str	r0, [r4, #12]
 8001550:	2104      	movs	r1, #4
 8001552:	6860      	ldr	r0, [r4, #4]
 8001554:	f7ff ff82 	bl	800145c <std>
 8001558:	68a0      	ldr	r0, [r4, #8]
 800155a:	2201      	movs	r2, #1
 800155c:	2109      	movs	r1, #9
 800155e:	f7ff ff7d 	bl	800145c <std>
 8001562:	68e0      	ldr	r0, [r4, #12]
 8001564:	2202      	movs	r2, #2
 8001566:	2112      	movs	r1, #18
 8001568:	f7ff ff78 	bl	800145c <std>
 800156c:	2301      	movs	r3, #1
 800156e:	61a3      	str	r3, [r4, #24]
 8001570:	e7d2      	b.n	8001518 <__sinit+0xc>
 8001572:	bf00      	nop
 8001574:	08002064 	.word	0x08002064
 8001578:	080014a5 	.word	0x080014a5

0800157c <__sfp>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	4607      	mov	r7, r0
 8001580:	f7ff ffac 	bl	80014dc <__sfp_lock_acquire>
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <__sfp+0x84>)
 8001586:	681e      	ldr	r6, [r3, #0]
 8001588:	69b3      	ldr	r3, [r6, #24]
 800158a:	b913      	cbnz	r3, 8001592 <__sfp+0x16>
 800158c:	4630      	mov	r0, r6
 800158e:	f7ff ffbd 	bl	800150c <__sinit>
 8001592:	3648      	adds	r6, #72	; 0x48
 8001594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001598:	3b01      	subs	r3, #1
 800159a:	d503      	bpl.n	80015a4 <__sfp+0x28>
 800159c:	6833      	ldr	r3, [r6, #0]
 800159e:	b30b      	cbz	r3, 80015e4 <__sfp+0x68>
 80015a0:	6836      	ldr	r6, [r6, #0]
 80015a2:	e7f7      	b.n	8001594 <__sfp+0x18>
 80015a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015a8:	b9d5      	cbnz	r5, 80015e0 <__sfp+0x64>
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <__sfp+0x88>)
 80015ac:	60e3      	str	r3, [r4, #12]
 80015ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015b2:	6665      	str	r5, [r4, #100]	; 0x64
 80015b4:	f000 f847 	bl	8001646 <__retarget_lock_init_recursive>
 80015b8:	f7ff ff96 	bl	80014e8 <__sfp_lock_release>
 80015bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015c4:	6025      	str	r5, [r4, #0]
 80015c6:	61a5      	str	r5, [r4, #24]
 80015c8:	2208      	movs	r2, #8
 80015ca:	4629      	mov	r1, r5
 80015cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015d0:	f7ff fd2c 	bl	800102c <memset>
 80015d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015dc:	4620      	mov	r0, r4
 80015de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015e0:	3468      	adds	r4, #104	; 0x68
 80015e2:	e7d9      	b.n	8001598 <__sfp+0x1c>
 80015e4:	2104      	movs	r1, #4
 80015e6:	4638      	mov	r0, r7
 80015e8:	f7ff ff62 	bl	80014b0 <__sfmoreglue>
 80015ec:	4604      	mov	r4, r0
 80015ee:	6030      	str	r0, [r6, #0]
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d1d5      	bne.n	80015a0 <__sfp+0x24>
 80015f4:	f7ff ff78 	bl	80014e8 <__sfp_lock_release>
 80015f8:	230c      	movs	r3, #12
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	e7ee      	b.n	80015dc <__sfp+0x60>
 80015fe:	bf00      	nop
 8001600:	08002064 	.word	0x08002064
 8001604:	ffff0001 	.word	0xffff0001

08001608 <_fwalk_reent>:
 8001608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800160c:	4606      	mov	r6, r0
 800160e:	4688      	mov	r8, r1
 8001610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001614:	2700      	movs	r7, #0
 8001616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800161a:	f1b9 0901 	subs.w	r9, r9, #1
 800161e:	d505      	bpl.n	800162c <_fwalk_reent+0x24>
 8001620:	6824      	ldr	r4, [r4, #0]
 8001622:	2c00      	cmp	r4, #0
 8001624:	d1f7      	bne.n	8001616 <_fwalk_reent+0xe>
 8001626:	4638      	mov	r0, r7
 8001628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800162c:	89ab      	ldrh	r3, [r5, #12]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d907      	bls.n	8001642 <_fwalk_reent+0x3a>
 8001632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001636:	3301      	adds	r3, #1
 8001638:	d003      	beq.n	8001642 <_fwalk_reent+0x3a>
 800163a:	4629      	mov	r1, r5
 800163c:	4630      	mov	r0, r6
 800163e:	47c0      	blx	r8
 8001640:	4307      	orrs	r7, r0
 8001642:	3568      	adds	r5, #104	; 0x68
 8001644:	e7e9      	b.n	800161a <_fwalk_reent+0x12>

08001646 <__retarget_lock_init_recursive>:
 8001646:	4770      	bx	lr

08001648 <__retarget_lock_acquire_recursive>:
 8001648:	4770      	bx	lr

0800164a <__retarget_lock_release_recursive>:
 800164a:	4770      	bx	lr

0800164c <__swhatbuf_r>:
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	460e      	mov	r6, r1
 8001650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001654:	2900      	cmp	r1, #0
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	da07      	bge.n	800166e <__swhatbuf_r+0x22>
 800165e:	2300      	movs	r3, #0
 8001660:	602b      	str	r3, [r5, #0]
 8001662:	89b3      	ldrh	r3, [r6, #12]
 8001664:	061a      	lsls	r2, r3, #24
 8001666:	d410      	bmi.n	800168a <__swhatbuf_r+0x3e>
 8001668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166c:	e00e      	b.n	800168c <__swhatbuf_r+0x40>
 800166e:	466a      	mov	r2, sp
 8001670:	f000 fc5e 	bl	8001f30 <_fstat_r>
 8001674:	2800      	cmp	r0, #0
 8001676:	dbf2      	blt.n	800165e <__swhatbuf_r+0x12>
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800167e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001682:	425a      	negs	r2, r3
 8001684:	415a      	adcs	r2, r3
 8001686:	602a      	str	r2, [r5, #0]
 8001688:	e7ee      	b.n	8001668 <__swhatbuf_r+0x1c>
 800168a:	2340      	movs	r3, #64	; 0x40
 800168c:	2000      	movs	r0, #0
 800168e:	6023      	str	r3, [r4, #0]
 8001690:	b016      	add	sp, #88	; 0x58
 8001692:	bd70      	pop	{r4, r5, r6, pc}

08001694 <__smakebuf_r>:
 8001694:	898b      	ldrh	r3, [r1, #12]
 8001696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001698:	079d      	lsls	r5, r3, #30
 800169a:	4606      	mov	r6, r0
 800169c:	460c      	mov	r4, r1
 800169e:	d507      	bpl.n	80016b0 <__smakebuf_r+0x1c>
 80016a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	6123      	str	r3, [r4, #16]
 80016a8:	2301      	movs	r3, #1
 80016aa:	6163      	str	r3, [r4, #20]
 80016ac:	b002      	add	sp, #8
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	ab01      	add	r3, sp, #4
 80016b2:	466a      	mov	r2, sp
 80016b4:	f7ff ffca 	bl	800164c <__swhatbuf_r>
 80016b8:	9900      	ldr	r1, [sp, #0]
 80016ba:	4605      	mov	r5, r0
 80016bc:	4630      	mov	r0, r6
 80016be:	f000 f879 	bl	80017b4 <_malloc_r>
 80016c2:	b948      	cbnz	r0, 80016d8 <__smakebuf_r+0x44>
 80016c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016c8:	059a      	lsls	r2, r3, #22
 80016ca:	d4ef      	bmi.n	80016ac <__smakebuf_r+0x18>
 80016cc:	f023 0303 	bic.w	r3, r3, #3
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	81a3      	strh	r3, [r4, #12]
 80016d6:	e7e3      	b.n	80016a0 <__smakebuf_r+0xc>
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <__smakebuf_r+0x7c>)
 80016da:	62b3      	str	r3, [r6, #40]	; 0x28
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	6020      	str	r0, [r4, #0]
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	9b00      	ldr	r3, [sp, #0]
 80016e8:	6163      	str	r3, [r4, #20]
 80016ea:	9b01      	ldr	r3, [sp, #4]
 80016ec:	6120      	str	r0, [r4, #16]
 80016ee:	b15b      	cbz	r3, 8001708 <__smakebuf_r+0x74>
 80016f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016f4:	4630      	mov	r0, r6
 80016f6:	f000 fc2d 	bl	8001f54 <_isatty_r>
 80016fa:	b128      	cbz	r0, 8001708 <__smakebuf_r+0x74>
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	81a3      	strh	r3, [r4, #12]
 8001708:	89a0      	ldrh	r0, [r4, #12]
 800170a:	4305      	orrs	r5, r0
 800170c:	81a5      	strh	r5, [r4, #12]
 800170e:	e7cd      	b.n	80016ac <__smakebuf_r+0x18>
 8001710:	080014a5 	.word	0x080014a5

08001714 <_free_r>:
 8001714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001716:	2900      	cmp	r1, #0
 8001718:	d048      	beq.n	80017ac <_free_r+0x98>
 800171a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800171e:	9001      	str	r0, [sp, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f1a1 0404 	sub.w	r4, r1, #4
 8001726:	bfb8      	it	lt
 8001728:	18e4      	addlt	r4, r4, r3
 800172a:	f000 fc35 	bl	8001f98 <__malloc_lock>
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <_free_r+0x9c>)
 8001730:	9801      	ldr	r0, [sp, #4]
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	4615      	mov	r5, r2
 8001736:	b933      	cbnz	r3, 8001746 <_free_r+0x32>
 8001738:	6063      	str	r3, [r4, #4]
 800173a:	6014      	str	r4, [r2, #0]
 800173c:	b003      	add	sp, #12
 800173e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001742:	f000 bc2f 	b.w	8001fa4 <__malloc_unlock>
 8001746:	42a3      	cmp	r3, r4
 8001748:	d90b      	bls.n	8001762 <_free_r+0x4e>
 800174a:	6821      	ldr	r1, [r4, #0]
 800174c:	1862      	adds	r2, r4, r1
 800174e:	4293      	cmp	r3, r2
 8001750:	bf04      	itt	eq
 8001752:	681a      	ldreq	r2, [r3, #0]
 8001754:	685b      	ldreq	r3, [r3, #4]
 8001756:	6063      	str	r3, [r4, #4]
 8001758:	bf04      	itt	eq
 800175a:	1852      	addeq	r2, r2, r1
 800175c:	6022      	streq	r2, [r4, #0]
 800175e:	602c      	str	r4, [r5, #0]
 8001760:	e7ec      	b.n	800173c <_free_r+0x28>
 8001762:	461a      	mov	r2, r3
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	b10b      	cbz	r3, 800176c <_free_r+0x58>
 8001768:	42a3      	cmp	r3, r4
 800176a:	d9fa      	bls.n	8001762 <_free_r+0x4e>
 800176c:	6811      	ldr	r1, [r2, #0]
 800176e:	1855      	adds	r5, r2, r1
 8001770:	42a5      	cmp	r5, r4
 8001772:	d10b      	bne.n	800178c <_free_r+0x78>
 8001774:	6824      	ldr	r4, [r4, #0]
 8001776:	4421      	add	r1, r4
 8001778:	1854      	adds	r4, r2, r1
 800177a:	42a3      	cmp	r3, r4
 800177c:	6011      	str	r1, [r2, #0]
 800177e:	d1dd      	bne.n	800173c <_free_r+0x28>
 8001780:	681c      	ldr	r4, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	6053      	str	r3, [r2, #4]
 8001786:	4421      	add	r1, r4
 8001788:	6011      	str	r1, [r2, #0]
 800178a:	e7d7      	b.n	800173c <_free_r+0x28>
 800178c:	d902      	bls.n	8001794 <_free_r+0x80>
 800178e:	230c      	movs	r3, #12
 8001790:	6003      	str	r3, [r0, #0]
 8001792:	e7d3      	b.n	800173c <_free_r+0x28>
 8001794:	6825      	ldr	r5, [r4, #0]
 8001796:	1961      	adds	r1, r4, r5
 8001798:	428b      	cmp	r3, r1
 800179a:	bf04      	itt	eq
 800179c:	6819      	ldreq	r1, [r3, #0]
 800179e:	685b      	ldreq	r3, [r3, #4]
 80017a0:	6063      	str	r3, [r4, #4]
 80017a2:	bf04      	itt	eq
 80017a4:	1949      	addeq	r1, r1, r5
 80017a6:	6021      	streq	r1, [r4, #0]
 80017a8:	6054      	str	r4, [r2, #4]
 80017aa:	e7c7      	b.n	800173c <_free_r+0x28>
 80017ac:	b003      	add	sp, #12
 80017ae:	bd30      	pop	{r4, r5, pc}
 80017b0:	20000094 	.word	0x20000094

080017b4 <_malloc_r>:
 80017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b6:	1ccd      	adds	r5, r1, #3
 80017b8:	f025 0503 	bic.w	r5, r5, #3
 80017bc:	3508      	adds	r5, #8
 80017be:	2d0c      	cmp	r5, #12
 80017c0:	bf38      	it	cc
 80017c2:	250c      	movcc	r5, #12
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	4606      	mov	r6, r0
 80017c8:	db01      	blt.n	80017ce <_malloc_r+0x1a>
 80017ca:	42a9      	cmp	r1, r5
 80017cc:	d903      	bls.n	80017d6 <_malloc_r+0x22>
 80017ce:	230c      	movs	r3, #12
 80017d0:	6033      	str	r3, [r6, #0]
 80017d2:	2000      	movs	r0, #0
 80017d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017d6:	f000 fbdf 	bl	8001f98 <__malloc_lock>
 80017da:	4921      	ldr	r1, [pc, #132]	; (8001860 <_malloc_r+0xac>)
 80017dc:	680a      	ldr	r2, [r1, #0]
 80017de:	4614      	mov	r4, r2
 80017e0:	b99c      	cbnz	r4, 800180a <_malloc_r+0x56>
 80017e2:	4f20      	ldr	r7, [pc, #128]	; (8001864 <_malloc_r+0xb0>)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b923      	cbnz	r3, 80017f2 <_malloc_r+0x3e>
 80017e8:	4621      	mov	r1, r4
 80017ea:	4630      	mov	r0, r6
 80017ec:	f000 fb2a 	bl	8001e44 <_sbrk_r>
 80017f0:	6038      	str	r0, [r7, #0]
 80017f2:	4629      	mov	r1, r5
 80017f4:	4630      	mov	r0, r6
 80017f6:	f000 fb25 	bl	8001e44 <_sbrk_r>
 80017fa:	1c43      	adds	r3, r0, #1
 80017fc:	d123      	bne.n	8001846 <_malloc_r+0x92>
 80017fe:	230c      	movs	r3, #12
 8001800:	6033      	str	r3, [r6, #0]
 8001802:	4630      	mov	r0, r6
 8001804:	f000 fbce 	bl	8001fa4 <__malloc_unlock>
 8001808:	e7e3      	b.n	80017d2 <_malloc_r+0x1e>
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	1b5b      	subs	r3, r3, r5
 800180e:	d417      	bmi.n	8001840 <_malloc_r+0x8c>
 8001810:	2b0b      	cmp	r3, #11
 8001812:	d903      	bls.n	800181c <_malloc_r+0x68>
 8001814:	6023      	str	r3, [r4, #0]
 8001816:	441c      	add	r4, r3
 8001818:	6025      	str	r5, [r4, #0]
 800181a:	e004      	b.n	8001826 <_malloc_r+0x72>
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	42a2      	cmp	r2, r4
 8001820:	bf0c      	ite	eq
 8001822:	600b      	streq	r3, [r1, #0]
 8001824:	6053      	strne	r3, [r2, #4]
 8001826:	4630      	mov	r0, r6
 8001828:	f000 fbbc 	bl	8001fa4 <__malloc_unlock>
 800182c:	f104 000b 	add.w	r0, r4, #11
 8001830:	1d23      	adds	r3, r4, #4
 8001832:	f020 0007 	bic.w	r0, r0, #7
 8001836:	1ac2      	subs	r2, r0, r3
 8001838:	d0cc      	beq.n	80017d4 <_malloc_r+0x20>
 800183a:	1a1b      	subs	r3, r3, r0
 800183c:	50a3      	str	r3, [r4, r2]
 800183e:	e7c9      	b.n	80017d4 <_malloc_r+0x20>
 8001840:	4622      	mov	r2, r4
 8001842:	6864      	ldr	r4, [r4, #4]
 8001844:	e7cc      	b.n	80017e0 <_malloc_r+0x2c>
 8001846:	1cc4      	adds	r4, r0, #3
 8001848:	f024 0403 	bic.w	r4, r4, #3
 800184c:	42a0      	cmp	r0, r4
 800184e:	d0e3      	beq.n	8001818 <_malloc_r+0x64>
 8001850:	1a21      	subs	r1, r4, r0
 8001852:	4630      	mov	r0, r6
 8001854:	f000 faf6 	bl	8001e44 <_sbrk_r>
 8001858:	3001      	adds	r0, #1
 800185a:	d1dd      	bne.n	8001818 <_malloc_r+0x64>
 800185c:	e7cf      	b.n	80017fe <_malloc_r+0x4a>
 800185e:	bf00      	nop
 8001860:	20000094 	.word	0x20000094
 8001864:	20000098 	.word	0x20000098

08001868 <__sfputc_r>:
 8001868:	6893      	ldr	r3, [r2, #8]
 800186a:	3b01      	subs	r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	b410      	push	{r4}
 8001870:	6093      	str	r3, [r2, #8]
 8001872:	da08      	bge.n	8001886 <__sfputc_r+0x1e>
 8001874:	6994      	ldr	r4, [r2, #24]
 8001876:	42a3      	cmp	r3, r4
 8001878:	db01      	blt.n	800187e <__sfputc_r+0x16>
 800187a:	290a      	cmp	r1, #10
 800187c:	d103      	bne.n	8001886 <__sfputc_r+0x1e>
 800187e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001882:	f7ff bc69 	b.w	8001158 <__swbuf_r>
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	1c58      	adds	r0, r3, #1
 800188a:	6010      	str	r0, [r2, #0]
 800188c:	7019      	strb	r1, [r3, #0]
 800188e:	4608      	mov	r0, r1
 8001890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001894:	4770      	bx	lr

08001896 <__sfputs_r>:
 8001896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001898:	4606      	mov	r6, r0
 800189a:	460f      	mov	r7, r1
 800189c:	4614      	mov	r4, r2
 800189e:	18d5      	adds	r5, r2, r3
 80018a0:	42ac      	cmp	r4, r5
 80018a2:	d101      	bne.n	80018a8 <__sfputs_r+0x12>
 80018a4:	2000      	movs	r0, #0
 80018a6:	e007      	b.n	80018b8 <__sfputs_r+0x22>
 80018a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ac:	463a      	mov	r2, r7
 80018ae:	4630      	mov	r0, r6
 80018b0:	f7ff ffda 	bl	8001868 <__sfputc_r>
 80018b4:	1c43      	adds	r3, r0, #1
 80018b6:	d1f3      	bne.n	80018a0 <__sfputs_r+0xa>
 80018b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018bc <_vfiprintf_r>:
 80018bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c0:	460d      	mov	r5, r1
 80018c2:	b09d      	sub	sp, #116	; 0x74
 80018c4:	4614      	mov	r4, r2
 80018c6:	4698      	mov	r8, r3
 80018c8:	4606      	mov	r6, r0
 80018ca:	b118      	cbz	r0, 80018d4 <_vfiprintf_r+0x18>
 80018cc:	6983      	ldr	r3, [r0, #24]
 80018ce:	b90b      	cbnz	r3, 80018d4 <_vfiprintf_r+0x18>
 80018d0:	f7ff fe1c 	bl	800150c <__sinit>
 80018d4:	4b89      	ldr	r3, [pc, #548]	; (8001afc <_vfiprintf_r+0x240>)
 80018d6:	429d      	cmp	r5, r3
 80018d8:	d11b      	bne.n	8001912 <_vfiprintf_r+0x56>
 80018da:	6875      	ldr	r5, [r6, #4]
 80018dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d405      	bmi.n	80018ee <_vfiprintf_r+0x32>
 80018e2:	89ab      	ldrh	r3, [r5, #12]
 80018e4:	059a      	lsls	r2, r3, #22
 80018e6:	d402      	bmi.n	80018ee <_vfiprintf_r+0x32>
 80018e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018ea:	f7ff fead 	bl	8001648 <__retarget_lock_acquire_recursive>
 80018ee:	89ab      	ldrh	r3, [r5, #12]
 80018f0:	071b      	lsls	r3, r3, #28
 80018f2:	d501      	bpl.n	80018f8 <_vfiprintf_r+0x3c>
 80018f4:	692b      	ldr	r3, [r5, #16]
 80018f6:	b9eb      	cbnz	r3, 8001934 <_vfiprintf_r+0x78>
 80018f8:	4629      	mov	r1, r5
 80018fa:	4630      	mov	r0, r6
 80018fc:	f7ff fc7e 	bl	80011fc <__swsetup_r>
 8001900:	b1c0      	cbz	r0, 8001934 <_vfiprintf_r+0x78>
 8001902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001904:	07dc      	lsls	r4, r3, #31
 8001906:	d50e      	bpl.n	8001926 <_vfiprintf_r+0x6a>
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	b01d      	add	sp, #116	; 0x74
 800190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001912:	4b7b      	ldr	r3, [pc, #492]	; (8001b00 <_vfiprintf_r+0x244>)
 8001914:	429d      	cmp	r5, r3
 8001916:	d101      	bne.n	800191c <_vfiprintf_r+0x60>
 8001918:	68b5      	ldr	r5, [r6, #8]
 800191a:	e7df      	b.n	80018dc <_vfiprintf_r+0x20>
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <_vfiprintf_r+0x248>)
 800191e:	429d      	cmp	r5, r3
 8001920:	bf08      	it	eq
 8001922:	68f5      	ldreq	r5, [r6, #12]
 8001924:	e7da      	b.n	80018dc <_vfiprintf_r+0x20>
 8001926:	89ab      	ldrh	r3, [r5, #12]
 8001928:	0598      	lsls	r0, r3, #22
 800192a:	d4ed      	bmi.n	8001908 <_vfiprintf_r+0x4c>
 800192c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800192e:	f7ff fe8c 	bl	800164a <__retarget_lock_release_recursive>
 8001932:	e7e9      	b.n	8001908 <_vfiprintf_r+0x4c>
 8001934:	2300      	movs	r3, #0
 8001936:	9309      	str	r3, [sp, #36]	; 0x24
 8001938:	2320      	movs	r3, #32
 800193a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800193e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001942:	2330      	movs	r3, #48	; 0x30
 8001944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001b08 <_vfiprintf_r+0x24c>
 8001948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800194c:	f04f 0901 	mov.w	r9, #1
 8001950:	4623      	mov	r3, r4
 8001952:	469a      	mov	sl, r3
 8001954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001958:	b10a      	cbz	r2, 800195e <_vfiprintf_r+0xa2>
 800195a:	2a25      	cmp	r2, #37	; 0x25
 800195c:	d1f9      	bne.n	8001952 <_vfiprintf_r+0x96>
 800195e:	ebba 0b04 	subs.w	fp, sl, r4
 8001962:	d00b      	beq.n	800197c <_vfiprintf_r+0xc0>
 8001964:	465b      	mov	r3, fp
 8001966:	4622      	mov	r2, r4
 8001968:	4629      	mov	r1, r5
 800196a:	4630      	mov	r0, r6
 800196c:	f7ff ff93 	bl	8001896 <__sfputs_r>
 8001970:	3001      	adds	r0, #1
 8001972:	f000 80aa 	beq.w	8001aca <_vfiprintf_r+0x20e>
 8001976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001978:	445a      	add	r2, fp
 800197a:	9209      	str	r2, [sp, #36]	; 0x24
 800197c:	f89a 3000 	ldrb.w	r3, [sl]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a2 	beq.w	8001aca <_vfiprintf_r+0x20e>
 8001986:	2300      	movs	r3, #0
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001990:	f10a 0a01 	add.w	sl, sl, #1
 8001994:	9304      	str	r3, [sp, #16]
 8001996:	9307      	str	r3, [sp, #28]
 8001998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800199c:	931a      	str	r3, [sp, #104]	; 0x68
 800199e:	4654      	mov	r4, sl
 80019a0:	2205      	movs	r2, #5
 80019a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019a6:	4858      	ldr	r0, [pc, #352]	; (8001b08 <_vfiprintf_r+0x24c>)
 80019a8:	f7fe fc1a 	bl	80001e0 <memchr>
 80019ac:	9a04      	ldr	r2, [sp, #16]
 80019ae:	b9d8      	cbnz	r0, 80019e8 <_vfiprintf_r+0x12c>
 80019b0:	06d1      	lsls	r1, r2, #27
 80019b2:	bf44      	itt	mi
 80019b4:	2320      	movmi	r3, #32
 80019b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019ba:	0713      	lsls	r3, r2, #28
 80019bc:	bf44      	itt	mi
 80019be:	232b      	movmi	r3, #43	; 0x2b
 80019c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80019c4:	f89a 3000 	ldrb.w	r3, [sl]
 80019c8:	2b2a      	cmp	r3, #42	; 0x2a
 80019ca:	d015      	beq.n	80019f8 <_vfiprintf_r+0x13c>
 80019cc:	9a07      	ldr	r2, [sp, #28]
 80019ce:	4654      	mov	r4, sl
 80019d0:	2000      	movs	r0, #0
 80019d2:	f04f 0c0a 	mov.w	ip, #10
 80019d6:	4621      	mov	r1, r4
 80019d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019dc:	3b30      	subs	r3, #48	; 0x30
 80019de:	2b09      	cmp	r3, #9
 80019e0:	d94e      	bls.n	8001a80 <_vfiprintf_r+0x1c4>
 80019e2:	b1b0      	cbz	r0, 8001a12 <_vfiprintf_r+0x156>
 80019e4:	9207      	str	r2, [sp, #28]
 80019e6:	e014      	b.n	8001a12 <_vfiprintf_r+0x156>
 80019e8:	eba0 0308 	sub.w	r3, r0, r8
 80019ec:	fa09 f303 	lsl.w	r3, r9, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	9304      	str	r3, [sp, #16]
 80019f4:	46a2      	mov	sl, r4
 80019f6:	e7d2      	b.n	800199e <_vfiprintf_r+0xe2>
 80019f8:	9b03      	ldr	r3, [sp, #12]
 80019fa:	1d19      	adds	r1, r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	9103      	str	r1, [sp, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfbb      	ittet	lt
 8001a04:	425b      	neglt	r3, r3
 8001a06:	f042 0202 	orrlt.w	r2, r2, #2
 8001a0a:	9307      	strge	r3, [sp, #28]
 8001a0c:	9307      	strlt	r3, [sp, #28]
 8001a0e:	bfb8      	it	lt
 8001a10:	9204      	strlt	r2, [sp, #16]
 8001a12:	7823      	ldrb	r3, [r4, #0]
 8001a14:	2b2e      	cmp	r3, #46	; 0x2e
 8001a16:	d10c      	bne.n	8001a32 <_vfiprintf_r+0x176>
 8001a18:	7863      	ldrb	r3, [r4, #1]
 8001a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a1c:	d135      	bne.n	8001a8a <_vfiprintf_r+0x1ce>
 8001a1e:	9b03      	ldr	r3, [sp, #12]
 8001a20:	1d1a      	adds	r2, r3, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	9203      	str	r2, [sp, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bfb8      	it	lt
 8001a2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a2e:	3402      	adds	r4, #2
 8001a30:	9305      	str	r3, [sp, #20]
 8001a32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001b18 <_vfiprintf_r+0x25c>
 8001a36:	7821      	ldrb	r1, [r4, #0]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4650      	mov	r0, sl
 8001a3c:	f7fe fbd0 	bl	80001e0 <memchr>
 8001a40:	b140      	cbz	r0, 8001a54 <_vfiprintf_r+0x198>
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	eba0 000a 	sub.w	r0, r0, sl
 8001a48:	fa03 f000 	lsl.w	r0, r3, r0
 8001a4c:	9b04      	ldr	r3, [sp, #16]
 8001a4e:	4303      	orrs	r3, r0
 8001a50:	3401      	adds	r4, #1
 8001a52:	9304      	str	r3, [sp, #16]
 8001a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a58:	482c      	ldr	r0, [pc, #176]	; (8001b0c <_vfiprintf_r+0x250>)
 8001a5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a5e:	2206      	movs	r2, #6
 8001a60:	f7fe fbbe 	bl	80001e0 <memchr>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d03f      	beq.n	8001ae8 <_vfiprintf_r+0x22c>
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <_vfiprintf_r+0x254>)
 8001a6a:	bb1b      	cbnz	r3, 8001ab4 <_vfiprintf_r+0x1f8>
 8001a6c:	9b03      	ldr	r3, [sp, #12]
 8001a6e:	3307      	adds	r3, #7
 8001a70:	f023 0307 	bic.w	r3, r3, #7
 8001a74:	3308      	adds	r3, #8
 8001a76:	9303      	str	r3, [sp, #12]
 8001a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a7a:	443b      	add	r3, r7
 8001a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a7e:	e767      	b.n	8001950 <_vfiprintf_r+0x94>
 8001a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a84:	460c      	mov	r4, r1
 8001a86:	2001      	movs	r0, #1
 8001a88:	e7a5      	b.n	80019d6 <_vfiprintf_r+0x11a>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	3401      	adds	r4, #1
 8001a8e:	9305      	str	r3, [sp, #20]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 0c0a 	mov.w	ip, #10
 8001a96:	4620      	mov	r0, r4
 8001a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a9c:	3a30      	subs	r2, #48	; 0x30
 8001a9e:	2a09      	cmp	r2, #9
 8001aa0:	d903      	bls.n	8001aaa <_vfiprintf_r+0x1ee>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0c5      	beq.n	8001a32 <_vfiprintf_r+0x176>
 8001aa6:	9105      	str	r1, [sp, #20]
 8001aa8:	e7c3      	b.n	8001a32 <_vfiprintf_r+0x176>
 8001aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aae:	4604      	mov	r4, r0
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e7f0      	b.n	8001a96 <_vfiprintf_r+0x1da>
 8001ab4:	ab03      	add	r3, sp, #12
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	462a      	mov	r2, r5
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <_vfiprintf_r+0x258>)
 8001abc:	a904      	add	r1, sp, #16
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f3af 8000 	nop.w
 8001ac4:	4607      	mov	r7, r0
 8001ac6:	1c78      	adds	r0, r7, #1
 8001ac8:	d1d6      	bne.n	8001a78 <_vfiprintf_r+0x1bc>
 8001aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001acc:	07d9      	lsls	r1, r3, #31
 8001ace:	d405      	bmi.n	8001adc <_vfiprintf_r+0x220>
 8001ad0:	89ab      	ldrh	r3, [r5, #12]
 8001ad2:	059a      	lsls	r2, r3, #22
 8001ad4:	d402      	bmi.n	8001adc <_vfiprintf_r+0x220>
 8001ad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ad8:	f7ff fdb7 	bl	800164a <__retarget_lock_release_recursive>
 8001adc:	89ab      	ldrh	r3, [r5, #12]
 8001ade:	065b      	lsls	r3, r3, #25
 8001ae0:	f53f af12 	bmi.w	8001908 <_vfiprintf_r+0x4c>
 8001ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ae6:	e711      	b.n	800190c <_vfiprintf_r+0x50>
 8001ae8:	ab03      	add	r3, sp, #12
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	462a      	mov	r2, r5
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <_vfiprintf_r+0x258>)
 8001af0:	a904      	add	r1, sp, #16
 8001af2:	4630      	mov	r0, r6
 8001af4:	f000 f880 	bl	8001bf8 <_printf_i>
 8001af8:	e7e4      	b.n	8001ac4 <_vfiprintf_r+0x208>
 8001afa:	bf00      	nop
 8001afc:	08002088 	.word	0x08002088
 8001b00:	080020a8 	.word	0x080020a8
 8001b04:	08002068 	.word	0x08002068
 8001b08:	080020c8 	.word	0x080020c8
 8001b0c:	080020d2 	.word	0x080020d2
 8001b10:	00000000 	.word	0x00000000
 8001b14:	08001897 	.word	0x08001897
 8001b18:	080020ce 	.word	0x080020ce

08001b1c <_printf_common>:
 8001b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b20:	4616      	mov	r6, r2
 8001b22:	4699      	mov	r9, r3
 8001b24:	688a      	ldr	r2, [r1, #8]
 8001b26:	690b      	ldr	r3, [r1, #16]
 8001b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	bfb8      	it	lt
 8001b30:	4613      	movlt	r3, r2
 8001b32:	6033      	str	r3, [r6, #0]
 8001b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b38:	4607      	mov	r7, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	b10a      	cbz	r2, 8001b42 <_printf_common+0x26>
 8001b3e:	3301      	adds	r3, #1
 8001b40:	6033      	str	r3, [r6, #0]
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	0699      	lsls	r1, r3, #26
 8001b46:	bf42      	ittt	mi
 8001b48:	6833      	ldrmi	r3, [r6, #0]
 8001b4a:	3302      	addmi	r3, #2
 8001b4c:	6033      	strmi	r3, [r6, #0]
 8001b4e:	6825      	ldr	r5, [r4, #0]
 8001b50:	f015 0506 	ands.w	r5, r5, #6
 8001b54:	d106      	bne.n	8001b64 <_printf_common+0x48>
 8001b56:	f104 0a19 	add.w	sl, r4, #25
 8001b5a:	68e3      	ldr	r3, [r4, #12]
 8001b5c:	6832      	ldr	r2, [r6, #0]
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	42ab      	cmp	r3, r5
 8001b62:	dc26      	bgt.n	8001bb2 <_printf_common+0x96>
 8001b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b68:	1e13      	subs	r3, r2, #0
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	bf18      	it	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	0692      	lsls	r2, r2, #26
 8001b72:	d42b      	bmi.n	8001bcc <_printf_common+0xb0>
 8001b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b78:	4649      	mov	r1, r9
 8001b7a:	4638      	mov	r0, r7
 8001b7c:	47c0      	blx	r8
 8001b7e:	3001      	adds	r0, #1
 8001b80:	d01e      	beq.n	8001bc0 <_printf_common+0xa4>
 8001b82:	6823      	ldr	r3, [r4, #0]
 8001b84:	68e5      	ldr	r5, [r4, #12]
 8001b86:	6832      	ldr	r2, [r6, #0]
 8001b88:	f003 0306 	and.w	r3, r3, #6
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	bf08      	it	eq
 8001b90:	1aad      	subeq	r5, r5, r2
 8001b92:	68a3      	ldr	r3, [r4, #8]
 8001b94:	6922      	ldr	r2, [r4, #16]
 8001b96:	bf0c      	ite	eq
 8001b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b9c:	2500      	movne	r5, #0
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	bfc4      	itt	gt
 8001ba2:	1a9b      	subgt	r3, r3, r2
 8001ba4:	18ed      	addgt	r5, r5, r3
 8001ba6:	2600      	movs	r6, #0
 8001ba8:	341a      	adds	r4, #26
 8001baa:	42b5      	cmp	r5, r6
 8001bac:	d11a      	bne.n	8001be4 <_printf_common+0xc8>
 8001bae:	2000      	movs	r0, #0
 8001bb0:	e008      	b.n	8001bc4 <_printf_common+0xa8>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	4652      	mov	r2, sl
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	4638      	mov	r0, r7
 8001bba:	47c0      	blx	r8
 8001bbc:	3001      	adds	r0, #1
 8001bbe:	d103      	bne.n	8001bc8 <_printf_common+0xac>
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bc8:	3501      	adds	r5, #1
 8001bca:	e7c6      	b.n	8001b5a <_printf_common+0x3e>
 8001bcc:	18e1      	adds	r1, r4, r3
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	2030      	movs	r0, #48	; 0x30
 8001bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bd6:	4422      	add	r2, r4
 8001bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001be0:	3302      	adds	r3, #2
 8001be2:	e7c7      	b.n	8001b74 <_printf_common+0x58>
 8001be4:	2301      	movs	r3, #1
 8001be6:	4622      	mov	r2, r4
 8001be8:	4649      	mov	r1, r9
 8001bea:	4638      	mov	r0, r7
 8001bec:	47c0      	blx	r8
 8001bee:	3001      	adds	r0, #1
 8001bf0:	d0e6      	beq.n	8001bc0 <_printf_common+0xa4>
 8001bf2:	3601      	adds	r6, #1
 8001bf4:	e7d9      	b.n	8001baa <_printf_common+0x8e>
	...

08001bf8 <_printf_i>:
 8001bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	4691      	mov	r9, r2
 8001c00:	7e27      	ldrb	r7, [r4, #24]
 8001c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001c04:	2f78      	cmp	r7, #120	; 0x78
 8001c06:	4680      	mov	r8, r0
 8001c08:	469a      	mov	sl, r3
 8001c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c0e:	d807      	bhi.n	8001c20 <_printf_i+0x28>
 8001c10:	2f62      	cmp	r7, #98	; 0x62
 8001c12:	d80a      	bhi.n	8001c2a <_printf_i+0x32>
 8001c14:	2f00      	cmp	r7, #0
 8001c16:	f000 80d8 	beq.w	8001dca <_printf_i+0x1d2>
 8001c1a:	2f58      	cmp	r7, #88	; 0x58
 8001c1c:	f000 80a3 	beq.w	8001d66 <_printf_i+0x16e>
 8001c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001c28:	e03a      	b.n	8001ca0 <_printf_i+0xa8>
 8001c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001c2e:	2b15      	cmp	r3, #21
 8001c30:	d8f6      	bhi.n	8001c20 <_printf_i+0x28>
 8001c32:	a001      	add	r0, pc, #4	; (adr r0, 8001c38 <_printf_i+0x40>)
 8001c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001c38:	08001c91 	.word	0x08001c91
 8001c3c:	08001ca5 	.word	0x08001ca5
 8001c40:	08001c21 	.word	0x08001c21
 8001c44:	08001c21 	.word	0x08001c21
 8001c48:	08001c21 	.word	0x08001c21
 8001c4c:	08001c21 	.word	0x08001c21
 8001c50:	08001ca5 	.word	0x08001ca5
 8001c54:	08001c21 	.word	0x08001c21
 8001c58:	08001c21 	.word	0x08001c21
 8001c5c:	08001c21 	.word	0x08001c21
 8001c60:	08001c21 	.word	0x08001c21
 8001c64:	08001db1 	.word	0x08001db1
 8001c68:	08001cd5 	.word	0x08001cd5
 8001c6c:	08001d93 	.word	0x08001d93
 8001c70:	08001c21 	.word	0x08001c21
 8001c74:	08001c21 	.word	0x08001c21
 8001c78:	08001dd3 	.word	0x08001dd3
 8001c7c:	08001c21 	.word	0x08001c21
 8001c80:	08001cd5 	.word	0x08001cd5
 8001c84:	08001c21 	.word	0x08001c21
 8001c88:	08001c21 	.word	0x08001c21
 8001c8c:	08001d9b 	.word	0x08001d9b
 8001c90:	680b      	ldr	r3, [r1, #0]
 8001c92:	1d1a      	adds	r2, r3, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	600a      	str	r2, [r1, #0]
 8001c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0a3      	b.n	8001dec <_printf_i+0x1f4>
 8001ca4:	6825      	ldr	r5, [r4, #0]
 8001ca6:	6808      	ldr	r0, [r1, #0]
 8001ca8:	062e      	lsls	r6, r5, #24
 8001caa:	f100 0304 	add.w	r3, r0, #4
 8001cae:	d50a      	bpl.n	8001cc6 <_printf_i+0xce>
 8001cb0:	6805      	ldr	r5, [r0, #0]
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	2d00      	cmp	r5, #0
 8001cb6:	da03      	bge.n	8001cc0 <_printf_i+0xc8>
 8001cb8:	232d      	movs	r3, #45	; 0x2d
 8001cba:	426d      	negs	r5, r5
 8001cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001cc0:	485e      	ldr	r0, [pc, #376]	; (8001e3c <_printf_i+0x244>)
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	e019      	b.n	8001cfa <_printf_i+0x102>
 8001cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001cca:	6805      	ldr	r5, [r0, #0]
 8001ccc:	600b      	str	r3, [r1, #0]
 8001cce:	bf18      	it	ne
 8001cd0:	b22d      	sxthne	r5, r5
 8001cd2:	e7ef      	b.n	8001cb4 <_printf_i+0xbc>
 8001cd4:	680b      	ldr	r3, [r1, #0]
 8001cd6:	6825      	ldr	r5, [r4, #0]
 8001cd8:	1d18      	adds	r0, r3, #4
 8001cda:	6008      	str	r0, [r1, #0]
 8001cdc:	0628      	lsls	r0, r5, #24
 8001cde:	d501      	bpl.n	8001ce4 <_printf_i+0xec>
 8001ce0:	681d      	ldr	r5, [r3, #0]
 8001ce2:	e002      	b.n	8001cea <_printf_i+0xf2>
 8001ce4:	0669      	lsls	r1, r5, #25
 8001ce6:	d5fb      	bpl.n	8001ce0 <_printf_i+0xe8>
 8001ce8:	881d      	ldrh	r5, [r3, #0]
 8001cea:	4854      	ldr	r0, [pc, #336]	; (8001e3c <_printf_i+0x244>)
 8001cec:	2f6f      	cmp	r7, #111	; 0x6f
 8001cee:	bf0c      	ite	eq
 8001cf0:	2308      	moveq	r3, #8
 8001cf2:	230a      	movne	r3, #10
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cfa:	6866      	ldr	r6, [r4, #4]
 8001cfc:	60a6      	str	r6, [r4, #8]
 8001cfe:	2e00      	cmp	r6, #0
 8001d00:	bfa2      	ittt	ge
 8001d02:	6821      	ldrge	r1, [r4, #0]
 8001d04:	f021 0104 	bicge.w	r1, r1, #4
 8001d08:	6021      	strge	r1, [r4, #0]
 8001d0a:	b90d      	cbnz	r5, 8001d10 <_printf_i+0x118>
 8001d0c:	2e00      	cmp	r6, #0
 8001d0e:	d04d      	beq.n	8001dac <_printf_i+0x1b4>
 8001d10:	4616      	mov	r6, r2
 8001d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d16:	fb03 5711 	mls	r7, r3, r1, r5
 8001d1a:	5dc7      	ldrb	r7, [r0, r7]
 8001d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d20:	462f      	mov	r7, r5
 8001d22:	42bb      	cmp	r3, r7
 8001d24:	460d      	mov	r5, r1
 8001d26:	d9f4      	bls.n	8001d12 <_printf_i+0x11a>
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d10b      	bne.n	8001d44 <_printf_i+0x14c>
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	07df      	lsls	r7, r3, #31
 8001d30:	d508      	bpl.n	8001d44 <_printf_i+0x14c>
 8001d32:	6923      	ldr	r3, [r4, #16]
 8001d34:	6861      	ldr	r1, [r4, #4]
 8001d36:	4299      	cmp	r1, r3
 8001d38:	bfde      	ittt	le
 8001d3a:	2330      	movle	r3, #48	; 0x30
 8001d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d44:	1b92      	subs	r2, r2, r6
 8001d46:	6122      	str	r2, [r4, #16]
 8001d48:	f8cd a000 	str.w	sl, [sp]
 8001d4c:	464b      	mov	r3, r9
 8001d4e:	aa03      	add	r2, sp, #12
 8001d50:	4621      	mov	r1, r4
 8001d52:	4640      	mov	r0, r8
 8001d54:	f7ff fee2 	bl	8001b1c <_printf_common>
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d14c      	bne.n	8001df6 <_printf_i+0x1fe>
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	b004      	add	sp, #16
 8001d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d66:	4835      	ldr	r0, [pc, #212]	; (8001e3c <_printf_i+0x244>)
 8001d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	680e      	ldr	r6, [r1, #0]
 8001d70:	061f      	lsls	r7, r3, #24
 8001d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8001d76:	600e      	str	r6, [r1, #0]
 8001d78:	d514      	bpl.n	8001da4 <_printf_i+0x1ac>
 8001d7a:	07d9      	lsls	r1, r3, #31
 8001d7c:	bf44      	itt	mi
 8001d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8001d82:	6023      	strmi	r3, [r4, #0]
 8001d84:	b91d      	cbnz	r5, 8001d8e <_printf_i+0x196>
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	f023 0320 	bic.w	r3, r3, #32
 8001d8c:	6023      	str	r3, [r4, #0]
 8001d8e:	2310      	movs	r3, #16
 8001d90:	e7b0      	b.n	8001cf4 <_printf_i+0xfc>
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	f043 0320 	orr.w	r3, r3, #32
 8001d98:	6023      	str	r3, [r4, #0]
 8001d9a:	2378      	movs	r3, #120	; 0x78
 8001d9c:	4828      	ldr	r0, [pc, #160]	; (8001e40 <_printf_i+0x248>)
 8001d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001da2:	e7e3      	b.n	8001d6c <_printf_i+0x174>
 8001da4:	065e      	lsls	r6, r3, #25
 8001da6:	bf48      	it	mi
 8001da8:	b2ad      	uxthmi	r5, r5
 8001daa:	e7e6      	b.n	8001d7a <_printf_i+0x182>
 8001dac:	4616      	mov	r6, r2
 8001dae:	e7bb      	b.n	8001d28 <_printf_i+0x130>
 8001db0:	680b      	ldr	r3, [r1, #0]
 8001db2:	6826      	ldr	r6, [r4, #0]
 8001db4:	6960      	ldr	r0, [r4, #20]
 8001db6:	1d1d      	adds	r5, r3, #4
 8001db8:	600d      	str	r5, [r1, #0]
 8001dba:	0635      	lsls	r5, r6, #24
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	d501      	bpl.n	8001dc4 <_printf_i+0x1cc>
 8001dc0:	6018      	str	r0, [r3, #0]
 8001dc2:	e002      	b.n	8001dca <_printf_i+0x1d2>
 8001dc4:	0671      	lsls	r1, r6, #25
 8001dc6:	d5fb      	bpl.n	8001dc0 <_printf_i+0x1c8>
 8001dc8:	8018      	strh	r0, [r3, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	6123      	str	r3, [r4, #16]
 8001dce:	4616      	mov	r6, r2
 8001dd0:	e7ba      	b.n	8001d48 <_printf_i+0x150>
 8001dd2:	680b      	ldr	r3, [r1, #0]
 8001dd4:	1d1a      	adds	r2, r3, #4
 8001dd6:	600a      	str	r2, [r1, #0]
 8001dd8:	681e      	ldr	r6, [r3, #0]
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4630      	mov	r0, r6
 8001de0:	f7fe f9fe 	bl	80001e0 <memchr>
 8001de4:	b108      	cbz	r0, 8001dea <_printf_i+0x1f2>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	6060      	str	r0, [r4, #4]
 8001dea:	6863      	ldr	r3, [r4, #4]
 8001dec:	6123      	str	r3, [r4, #16]
 8001dee:	2300      	movs	r3, #0
 8001df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001df4:	e7a8      	b.n	8001d48 <_printf_i+0x150>
 8001df6:	6923      	ldr	r3, [r4, #16]
 8001df8:	4632      	mov	r2, r6
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	47d0      	blx	sl
 8001e00:	3001      	adds	r0, #1
 8001e02:	d0ab      	beq.n	8001d5c <_printf_i+0x164>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	079b      	lsls	r3, r3, #30
 8001e08:	d413      	bmi.n	8001e32 <_printf_i+0x23a>
 8001e0a:	68e0      	ldr	r0, [r4, #12]
 8001e0c:	9b03      	ldr	r3, [sp, #12]
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	bfb8      	it	lt
 8001e12:	4618      	movlt	r0, r3
 8001e14:	e7a4      	b.n	8001d60 <_printf_i+0x168>
 8001e16:	2301      	movs	r3, #1
 8001e18:	4632      	mov	r2, r6
 8001e1a:	4649      	mov	r1, r9
 8001e1c:	4640      	mov	r0, r8
 8001e1e:	47d0      	blx	sl
 8001e20:	3001      	adds	r0, #1
 8001e22:	d09b      	beq.n	8001d5c <_printf_i+0x164>
 8001e24:	3501      	adds	r5, #1
 8001e26:	68e3      	ldr	r3, [r4, #12]
 8001e28:	9903      	ldr	r1, [sp, #12]
 8001e2a:	1a5b      	subs	r3, r3, r1
 8001e2c:	42ab      	cmp	r3, r5
 8001e2e:	dcf2      	bgt.n	8001e16 <_printf_i+0x21e>
 8001e30:	e7eb      	b.n	8001e0a <_printf_i+0x212>
 8001e32:	2500      	movs	r5, #0
 8001e34:	f104 0619 	add.w	r6, r4, #25
 8001e38:	e7f5      	b.n	8001e26 <_printf_i+0x22e>
 8001e3a:	bf00      	nop
 8001e3c:	080020d9 	.word	0x080020d9
 8001e40:	080020ea 	.word	0x080020ea

08001e44 <_sbrk_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4d06      	ldr	r5, [pc, #24]	; (8001e60 <_sbrk_r+0x1c>)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	f7ff f862 	bl	8000f18 <_sbrk>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	d102      	bne.n	8001e5e <_sbrk_r+0x1a>
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	b103      	cbz	r3, 8001e5e <_sbrk_r+0x1a>
 8001e5c:	6023      	str	r3, [r4, #0]
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
 8001e60:	200000a8 	.word	0x200000a8

08001e64 <__sread>:
 8001e64:	b510      	push	{r4, lr}
 8001e66:	460c      	mov	r4, r1
 8001e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6c:	f000 f8a0 	bl	8001fb0 <_read_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	bfab      	itete	ge
 8001e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e76:	89a3      	ldrhlt	r3, [r4, #12]
 8001e78:	181b      	addge	r3, r3, r0
 8001e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e7e:	bfac      	ite	ge
 8001e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e82:	81a3      	strhlt	r3, [r4, #12]
 8001e84:	bd10      	pop	{r4, pc}

08001e86 <__swrite>:
 8001e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8a:	461f      	mov	r7, r3
 8001e8c:	898b      	ldrh	r3, [r1, #12]
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	4605      	mov	r5, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	4616      	mov	r6, r2
 8001e96:	d505      	bpl.n	8001ea4 <__swrite+0x1e>
 8001e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f000 f868 	bl	8001f74 <_lseek_r>
 8001ea4:	89a3      	ldrh	r3, [r4, #12]
 8001ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eae:	81a3      	strh	r3, [r4, #12]
 8001eb0:	4632      	mov	r2, r6
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eba:	f000 b817 	b.w	8001eec <_write_r>

08001ebe <__sseek>:
 8001ebe:	b510      	push	{r4, lr}
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec6:	f000 f855 	bl	8001f74 <_lseek_r>
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	bf15      	itete	ne
 8001ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001eda:	81a3      	strheq	r3, [r4, #12]
 8001edc:	bf18      	it	ne
 8001ede:	81a3      	strhne	r3, [r4, #12]
 8001ee0:	bd10      	pop	{r4, pc}

08001ee2 <__sclose>:
 8001ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee6:	f000 b813 	b.w	8001f10 <_close_r>
	...

08001eec <_write_r>:
 8001eec:	b538      	push	{r3, r4, r5, lr}
 8001eee:	4d07      	ldr	r5, [pc, #28]	; (8001f0c <_write_r+0x20>)
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	4608      	mov	r0, r1
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	602a      	str	r2, [r5, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7fe ffbb 	bl	8000e76 <_write>
 8001f00:	1c43      	adds	r3, r0, #1
 8001f02:	d102      	bne.n	8001f0a <_write_r+0x1e>
 8001f04:	682b      	ldr	r3, [r5, #0]
 8001f06:	b103      	cbz	r3, 8001f0a <_write_r+0x1e>
 8001f08:	6023      	str	r3, [r4, #0]
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
 8001f0c:	200000a8 	.word	0x200000a8

08001f10 <_close_r>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	4d06      	ldr	r5, [pc, #24]	; (8001f2c <_close_r+0x1c>)
 8001f14:	2300      	movs	r3, #0
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	602b      	str	r3, [r5, #0]
 8001f1c:	f7fe ffc7 	bl	8000eae <_close>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d102      	bne.n	8001f2a <_close_r+0x1a>
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	b103      	cbz	r3, 8001f2a <_close_r+0x1a>
 8001f28:	6023      	str	r3, [r4, #0]
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	200000a8 	.word	0x200000a8

08001f30 <_fstat_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4d07      	ldr	r5, [pc, #28]	; (8001f50 <_fstat_r+0x20>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	4604      	mov	r4, r0
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	602b      	str	r3, [r5, #0]
 8001f3e:	f7fe ffc2 	bl	8000ec6 <_fstat>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	d102      	bne.n	8001f4c <_fstat_r+0x1c>
 8001f46:	682b      	ldr	r3, [r5, #0]
 8001f48:	b103      	cbz	r3, 8001f4c <_fstat_r+0x1c>
 8001f4a:	6023      	str	r3, [r4, #0]
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000a8 	.word	0x200000a8

08001f54 <_isatty_r>:
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4d06      	ldr	r5, [pc, #24]	; (8001f70 <_isatty_r+0x1c>)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	602b      	str	r3, [r5, #0]
 8001f60:	f7fe ffc1 	bl	8000ee6 <_isatty>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d102      	bne.n	8001f6e <_isatty_r+0x1a>
 8001f68:	682b      	ldr	r3, [r5, #0]
 8001f6a:	b103      	cbz	r3, 8001f6e <_isatty_r+0x1a>
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	bd38      	pop	{r3, r4, r5, pc}
 8001f70:	200000a8 	.word	0x200000a8

08001f74 <_lseek_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4d07      	ldr	r5, [pc, #28]	; (8001f94 <_lseek_r+0x20>)
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	2200      	movs	r2, #0
 8001f80:	602a      	str	r2, [r5, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f7fe ffba 	bl	8000efc <_lseek>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d102      	bne.n	8001f92 <_lseek_r+0x1e>
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	b103      	cbz	r3, 8001f92 <_lseek_r+0x1e>
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	200000a8 	.word	0x200000a8

08001f98 <__malloc_lock>:
 8001f98:	4801      	ldr	r0, [pc, #4]	; (8001fa0 <__malloc_lock+0x8>)
 8001f9a:	f7ff bb55 	b.w	8001648 <__retarget_lock_acquire_recursive>
 8001f9e:	bf00      	nop
 8001fa0:	200000a0 	.word	0x200000a0

08001fa4 <__malloc_unlock>:
 8001fa4:	4801      	ldr	r0, [pc, #4]	; (8001fac <__malloc_unlock+0x8>)
 8001fa6:	f7ff bb50 	b.w	800164a <__retarget_lock_release_recursive>
 8001faa:	bf00      	nop
 8001fac:	200000a0 	.word	0x200000a0

08001fb0 <_read_r>:
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	4d07      	ldr	r5, [pc, #28]	; (8001fd0 <_read_r+0x20>)
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	4608      	mov	r0, r1
 8001fb8:	4611      	mov	r1, r2
 8001fba:	2200      	movs	r2, #0
 8001fbc:	602a      	str	r2, [r5, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7fe ff3c 	bl	8000e3c <_read>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d102      	bne.n	8001fce <_read_r+0x1e>
 8001fc8:	682b      	ldr	r3, [r5, #0]
 8001fca:	b103      	cbz	r3, 8001fce <_read_r+0x1e>
 8001fcc:	6023      	str	r3, [r4, #0]
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
 8001fd0:	200000a8 	.word	0x200000a8

08001fd4 <_init>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr

08001fe0 <_fini>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr
